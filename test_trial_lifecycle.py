#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏–π

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã:
1. planned ‚Üí active
2. active ‚Üí completed_008 (—á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É 008)
3. completed_008 ‚Üí lab_sample_sent
4. lab_sample_sent ‚Üí lab_completed
5. lab_completed ‚Üí completed
"""

import requests
import json
import sys
from datetime import date, datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8001/api/v1"
HEADERS = {
    "Content-Type": "application/json",
    "Accept": "application/json"
}

def log(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {message}")

def test_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    try:
        response = requests.get(f"{BASE_URL}/trials/", headers=HEADERS)
        if response.status_code == 200:
            log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            log(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def create_test_trial():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"""
    log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
    regions_response = requests.get(f"{BASE_URL}/regions/", headers=HEADERS)
    if regions_response.status_code != 200:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã")
        return None
    
    regions = regions_response.json()
    if not regions:
        log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤")
        return None
    
    region_id = regions[0]['id']
    log(f"üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω: {regions[0]['name']}")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–µ
    trial_data = {
        "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞",
        "region": region_id,
        "start_date": "2025-01-01",
        "status": "planned"
    }
    
    response = requests.post(f"{BASE_URL}/trials/", 
                           headers=HEADERS, 
                           data=json.dumps(trial_data))
    
    if response.status_code == 201:
        trial = response.json()
        log(f"‚úÖ –ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ID {trial['id']}")
        return trial
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø—ã—Ç–∞–Ω–∏—è: {response.status_code}")
        log(f"–û—Ç–≤–µ—Ç: {response.text}")
        return None

def test_status_transitions(trial_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    log(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∏—Å–ø—ã—Ç–∞–Ω–∏—è {trial_id}")
    
    # 1. planned ‚Üí active
    log("1Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ planned ‚Üí active")
    response = requests.patch(f"{BASE_URL}/trials/{trial_id}/", 
                            headers=HEADERS,
                            data=json.dumps({"status": "active"}))
    
    if response.status_code == 200:
        log("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'active'")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
        return False
    
    # 2. active ‚Üí completed_008 (—á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É 008)
    log("2Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ active ‚Üí completed_008 (—á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É 008)")
    
    # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω–∏–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä—è–º—É—é
    response = requests.patch(f"{BASE_URL}/trials/{trial_id}/", 
                            headers=HEADERS,
                            data=json.dumps({"status": "completed_008"}))
    
    if response.status_code == 200:
        log("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'completed_008'")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
        return False
    
    # 3. completed_008 ‚Üí lab_sample_sent
    log("3Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ completed_008 ‚Üí lab_sample_sent")
    
    lab_data = {
        "laboratory_code": "LAB-2025-TEST-001",
        "sample_weight_kg": 2.5,
        "sent_date": "2025-01-15",
        "sample_source": "–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü"
    }
    
    response = requests.post(f"{BASE_URL}/trials/{trial_id}/mark-sent-to-lab/", 
                           headers=HEADERS,
                           data=json.dumps(lab_data))
    
    if response.status_code == 200:
        log("‚úÖ –û–±—Ä–∞–∑–µ—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é: {response.status_code}")
        log(f"–û—Ç–≤–µ—Ç: {response.text}")
        return False
    
    # 4. lab_sample_sent ‚Üí lab_completed
    log("4Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ lab_sample_sent ‚Üí lab_completed")
    
    response = requests.post(f"{BASE_URL}/trials/{trial_id}/laboratory-complete/", 
                           headers=HEADERS,
                           data=json.dumps({"completed_date": "2025-01-20"}))
    
    if response.status_code == 200:
        log("‚úÖ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {response.status_code}")
        log(f"–û—Ç–≤–µ—Ç: {response.text}")
        return False
    
    # 5. lab_completed ‚Üí completed
    log("5Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ lab_completed ‚Üí completed")
    
    response = requests.post(f"{BASE_URL}/trials/{trial_id}/complete/", 
                           headers=HEADERS,
                           data=json.dumps({"completed_date": "2025-01-25"}))
    
    if response.status_code == 200:
        log("‚úÖ –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø—ã—Ç–∞–Ω–∏—è: {response.status_code}")
        log(f"–û—Ç–≤–µ—Ç: {response.text}")
        return False
    
    return True

def get_trial_status(trial_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"""
    response = requests.get(f"{BASE_URL}/trials/{trial_id}/", headers=HEADERS)
    if response.status_code == 200:
        trial = response.json()
        return trial['status']
    return None

def test_form008_integration(trial_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–æ—Ä–º–æ–π 008"""
    log("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–æ—Ä–º–æ–π 008...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É 008
    response = requests.get(f"{BASE_URL}/trials/{trial_id}/form008/", headers=HEADERS)
    if response.status_code == 200:
        log("‚úÖ –§–æ—Ä–º–∞ 008 –¥–æ—Å—Ç—É–ø–Ω–∞")
        form_data = response.json()
        log(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(form_data.get('participants', []))}")
        log(f"   –ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {len(form_data.get('indicators', []))}")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã 008: {response.status_code}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã 008 (—á–µ—Ä–Ω–æ–≤–∏–∫)
    form008_data = {
        "is_final": False,
        "harvest_date": "2025-01-10",
        "measurement_date": "2025-01-10",
        "participants": []
    }
    
    response = requests.post(f"{BASE_URL}/trials/{trial_id}/form008/bulk-save/", 
                           headers=HEADERS,
                           data=json.dumps(form008_data))
    
    if response.status_code == 200:
        log("‚úÖ –§–æ—Ä–º–∞ 008 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã 008: {response.status_code}")
        log(f"–û—Ç–≤–µ—Ç: {response.text}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã 008
    form008_data["is_final"] = True
    
    response = requests.post(f"{BASE_URL}/trials/{trial_id}/form008/bulk-save/", 
                           headers=HEADERS,
                           data=json.dumps(form008_data))
    
    if response.status_code == 200:
        log("‚úÖ –§–æ—Ä–º–∞ 008 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ completed_008
        status = get_trial_status(trial_id)
        if status == "completed_008":
            log("‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'completed_008'")
        else:
            log(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {status}")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã 008: {response.status_code}")
        log(f"–û—Ç–≤–µ—Ç: {response.text}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
    log("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not test_connection():
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    trial = create_test_trial()
    if not trial:
        sys.exit(1)
    
    trial_id = trial['id']
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
        if test_status_transitions(trial_id):
            log("‚úÖ –í—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            log("‚ùå –û—à–∏–±–∫–∏ –≤ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö —Å—Ç–∞—Ç—É—Å–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–æ—Ä–º–æ–π 008
        if test_form008_integration(trial_id):
            log("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–æ—Ä–º–æ–π 008 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            log("‚ùå –û—à–∏–±–∫–∏ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–æ—Ä–º–æ–π 008")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        final_status = get_trial_status(trial_id)
        log(f"üèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏—Å–ø—ã—Ç–∞–Ω–∏—è: {final_status}")
        
        log("=" * 60)
        log("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
