#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Patents Service

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç:
- –°–æ—Ä—Ç–∞ (2130+ —à—Ç—É–∫)
- –ö—É–ª—å—Ç—É—Ä—ã (150 —à—Ç—É–∫) 
- –ì—Ä—É–ø–ø—ã –∫—É–ª—å—Ç—É—Ä (15 —à—Ç—É–∫)
- –û—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä—ã (—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ—Ä—Ç–∞–º–∏)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python full_sync_from_patents.py
    python full_sync_from_patents.py --dry-run
    python full_sync_from_patents.py --limit 100
"""

import os
import sys
import django
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'trials.settings')
django.setup()

from django.utils import timezone
from trials_app.patents_integration import PatentsServiceClient
from trials_app.models import SortRecord, Culture, GroupCulture, Originator, SortOriginator


class FullSyncFromPatents:
    def __init__(self, dry_run=False, limit=None):
        self.dry_run = dry_run
        self.limit = limit
        self.client = PatentsServiceClient()
        self.stats = {
            'sorts': {'created': 0, 'updated': 0, 'skipped': 0, 'errors': 0},
            'cultures': {'created': 0, 'updated': 0, 'skipped': 0, 'errors': 0},
            'group_cultures': {'created': 0, 'updated': 0, 'skipped': 0, 'errors': 0},
            'originators': {'created': 0, 'updated': 0, 'skipped': 0, 'errors': 0},
        }
        
    def log(self, message, level='INFO'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        print(f"[{timestamp}] {message}")
    
    def sync_group_cultures(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä"""
        self.log("üåø –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä...")
        
        patents_groups = self.client.get_all_group_cultures()
        self.log(f"–ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø –∏–∑ Patents: {len(patents_groups)}")
        
        for group_data in patents_groups:
            group_id = group_data.get('id')
            name = group_data.get('name', '')
            
            if not group_id or not name:
                self.stats['group_cultures']['errors'] += 1
                continue
            
            try:
                if self.dry_run:
                    self.log(f"  [DRY] –ì—Ä—É–ø–ø–∞: {name} (ID: {group_id})")
                    self.stats['group_cultures']['skipped'] += 1
                    continue
                
                group, created = GroupCulture.objects.get_or_create(
                    group_culture_id=group_id,
                    defaults={
                        'name': name,
                        'is_deleted': False
                    }
                )
                
                if created:
                    self.log(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {name} (ID: {group_id})")
                    self.stats['group_cultures']['created'] += 1
                else:
                    if group.name != name or group.is_deleted:
                        group.name = name
                        group.is_deleted = False
                        group.save()
                        self.log(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {name} (ID: {group_id})")
                        self.stats['group_cultures']['updated'] += 1
                    else:
                        self.stats['group_cultures']['skipped'] += 1
                        
            except Exception as e:
                self.log(f"  ‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø—ã {group_id}: {e}", 'ERROR')
                self.stats['group_cultures']['errors'] += 1
    
    def sync_cultures(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä"""
        self.log("üå± –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä...")
        
        patents_cultures = self.client.get_all_cultures()
        self.log(f"–ü–æ–ª—É—á–µ–Ω–æ –∫—É–ª—å—Ç—É—Ä –∏–∑ Patents: {len(patents_cultures)}")
        
        for culture_data in patents_cultures:
            culture_id = culture_data.get('id')
            name = culture_data.get('name', '')
            
            if not culture_id or not name:
                self.stats['cultures']['errors'] += 1
                continue
            
            try:
                if self.dry_run:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –≤ dry-run
                    group_data = culture_data.get('group', {})
                    group_name = group_data.get('name', '–ë–µ–∑ –≥—Ä—É–ø–ø—ã') if group_data else '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'
                    self.log(f"  [DRY] –ö—É–ª—å—Ç—É—Ä–∞: {name} (ID: {culture_id}, –ì—Ä—É–ø–ø–∞: {group_name})")
                    self.stats['cultures']['skipped'] += 1
                    continue
                
                culture, created = Culture.objects.get_or_create(
                    culture_id=culture_id,
                    defaults={
                        'name': name,
                        'is_deleted': False,
                        'synced_at': timezone.now()
                    }
                )
                
                if created:
                    self.log(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {name} (ID: {culture_id})")
                    self.stats['cultures']['created'] += 1
                else:
                    if culture.name != name or culture.is_deleted:
                        culture.name = name
                        culture.is_deleted = False
                        culture.synced_at = timezone.now()
                        culture.save()
                        self.log(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {name} (ID: {culture_id})")
                        self.stats['cultures']['updated'] += 1
                    else:
                        self.stats['cultures']['skipped'] += 1
                        
            except Exception as e:
                self.log(f"  ‚ùå –û—à–∏–±–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã {culture_id}: {e}", 'ERROR')
                self.stats['cultures']['errors'] += 1
    
    def sync_culture_group_links(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π –∫—É–ª—å—Ç—É—Ä —Å –≥—Ä—É–ø–ø–∞–º–∏ –∫—É–ª—å—Ç—É—Ä"""
        self.log("üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π –∫—É–ª—å—Ç—É—Ä —Å –≥—Ä—É–ø–ø–∞–º–∏...")
        
        patents_cultures = self.client.get_all_cultures()
        self.log(f"–ü–æ–ª—É—á–µ–Ω–æ –∫—É–ª—å—Ç—É—Ä –∏–∑ Patents: {len(patents_cultures)}")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫—É–ª—å—Ç—É—Ä –∫ –≥—Ä—É–ø–ø–∞–º
        group_mapping = {}
        cultures_with_groups = 0
        
        for culture_data in patents_cultures:
            culture_id = culture_data.get('id')
            culture_name = culture_data.get('name', '')
            group_data = culture_data.get('group')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'group' –∞ –Ω–µ 'group_culture'
            
            if group_data and culture_id:
                cultures_with_groups += 1
                group_id = group_data.get('id')
                group_name = group_data.get('name', '')
                
                group_mapping[culture_id] = {
                    'group_id': group_id,
                    'group_name': group_name,
                    'culture_name': culture_name
                }
        
        self.log(f"–ö—É–ª—å—Ç—É—Ä —Å –≥—Ä—É–ø–ø–∞–º–∏: {cultures_with_groups}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ –ë–î
        stats = {'updated': 0, 'errors': 0, 'skipped': 0}
        
        for culture_id, group_info in group_mapping.items():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫—É–ª—å—Ç—É—Ä—É –∏–∑ –ë–î
                try:
                    culture = Culture.objects.get(culture_id=culture_id, is_deleted=False)
                except Culture.DoesNotExist:
                    stats['skipped'] += 1
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫—É–ª—å—Ç—É—Ä –∏–∑ –ë–î
                try:
                    group_culture = GroupCulture.objects.get(group_culture_id=group_info['group_id'], is_deleted=False)
                except GroupCulture.DoesNotExist:
                    stats['skipped'] += 1
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å
                if culture.group_culture != group_culture:
                    culture.group_culture = group_culture
                    culture.synced_at = timezone.now()
                    culture.save()
                    stats['updated'] += 1
                    if stats['updated'] <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        self.log(f"  ‚úÖ {culture.name} ‚Üí {group_culture.name}")
                else:
                    stats['skipped'] += 1
                    
            except Exception as e:
                stats['errors'] += 1
                self.log(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã {culture_id}: {e}", 'ERROR')
        
        self.log(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: {stats['updated']}")
        self.log(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
        self.log(f"–û—à–∏–±–æ–∫: {stats['errors']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['cultures']['updated'] += stats['updated']
        self.stats['cultures']['errors'] += stats['errors']
        self.stats['cultures']['skipped'] += stats['skipped']
    
    def sync_sorts(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–æ–≤"""
        self.log("üåæ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–æ–≤...")
        
        patents_sorts = self.client.get_all_sorts()
        self.log(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Ä—Ç–æ–≤ –∏–∑ Patents: {len(patents_sorts)}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if self.limit:
            patents_sorts = patents_sorts[:self.limit]
            self.log(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ {self.limit} —Å–æ—Ä—Ç–æ–≤")
        
        for i, sort_data in enumerate(patents_sorts, 1):
            sort_id = sort_data.get('id')
            name = sort_data.get('name', '')
            
            if not sort_id or not name:
                self.stats['sorts']['errors'] += 1
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Å–æ—Ä—Ç–æ–≤
            if i % 100 == 0:
                self.log(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(patents_sorts)}...")
            
            try:
                if self.dry_run:
                    if i <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –≤ dry-run
                        culture_name = sort_data.get('culture', {}).get('name', '–ë–µ–∑ –∫—É–ª—å—Ç—É—Ä—ã') if sort_data.get('culture') else '–ë–µ–∑ –∫—É–ª—å—Ç—É—Ä—ã'
                        self.log(f"  [DRY] {i:2d}. {name} (ID: {sort_id}, –ö—É–ª—å—Ç—É—Ä–∞: {culture_name})")
                    self.stats['sorts']['skipped'] += 1
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∫—É–ª—å—Ç—É—Ä—É
                culture_id = sort_data.get('culture', {}).get('id') if sort_data.get('culture') else None
                culture = None
                if culture_id:
                    try:
                        culture = Culture.objects.get(culture_id=culture_id, is_deleted=False)
                    except Culture.DoesNotExist:
                        self.log(f"  ‚ö†Ô∏è  –ö—É–ª—å—Ç—É—Ä–∞ {culture_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–æ—Ä—Ç–∞ {name}", 'WARNING')
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ä—Ç
                sort_record, created = SortRecord.objects.get_or_create(
                    sort_id=sort_id,
                    defaults={
                        'name': name,
                        'culture': culture,
                        'is_deleted': False,
                        'synced_at': timezone.now()
                    }
                )
                
                if created:
                    if i <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                        self.log(f"  ‚úÖ {i:2d}. –°–æ–∑–¥–∞–Ω: {name} (ID: {sort_id})")
                    self.stats['sorts']['created'] += 1
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    updated = False
                    if sort_record.name != name:
                        sort_record.name = name
                        updated = True
                    if sort_record.culture != culture:
                        sort_record.culture = culture
                        updated = True
                    if sort_record.is_deleted:
                        sort_record.is_deleted = False
                        updated = True
                    
                    if updated:
                        sort_record.synced_at = timezone.now()
                        sort_record.save()
                        if i <= 10:
                            self.log(f"  üîÑ {i:2d}. –û–±–Ω–æ–≤–ª–µ–Ω: {name} (ID: {sort_id})")
                        self.stats['sorts']['updated'] += 1
                    else:
                        self.stats['sorts']['skipped'] += 1
                        
            except Exception as e:
                self.log(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∞ {sort_id}: {e}", 'ERROR')
                self.stats['sorts']['errors'] += 1
    
    def sync_originators_from_sorts(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Å–æ—Ä—Ç–æ–≤"""
        self.log("üë• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Å–æ—Ä—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ä—Ç–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
        patents_sorts = self.client.get_all_sorts()
        
        if self.limit:
            patents_sorts = patents_sorts[:self.limit]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        sorts_processed = 0
        
        for i, sort_data in enumerate(patents_sorts, 1):
            sort_id = sort_data.get('id')
            sort_name = sort_data.get('name', '')
            
            if not sort_id:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ä—Ç–∞ (–ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'ariginators' —Å –æ–ø–µ—á–∞—Ç–∫–æ–π)
            ariginators_data = sort_data.get('ariginators', [])
            
            if not ariginators_data:
                continue
            
            sorts_processed += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 —Å–æ—Ä—Ç–æ–≤
            if sorts_processed % 500 == 0:
                self.log(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {sorts_processed} —Å–æ—Ä—Ç–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º SortRecord
                try:
                    sort_record = SortRecord.objects.get(sort_id=sort_id, is_deleted=False)
                except SortRecord.DoesNotExist:
                    continue
                
                for ariginator_data in ariginators_data:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ariginators
                    ariginator_info = ariginator_data.get('ariginator', {})
                    originator_id = ariginator_info.get('id')
                    originator_name = ariginator_info.get('name', '')
                    percentage = ariginator_data.get('percentage', 0)
                    
                    if not originator_id or not originator_name:
                        continue
                    
                    if self.dry_run:
                        if sorts_processed <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –≤ dry-run
                            self.log(f"  [DRY] –û—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä: {originator_name} –¥–ª—è {sort_name} ({percentage}%)")
                        self.stats['originators']['skipped'] += 1
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–∞
                    originator, created = Originator.objects.get_or_create(
                        originator_id=originator_id,
                        defaults={
                            'name': originator_name,
                            'is_deleted': False,
                            'synced_at': timezone.now()
                        }
                    )
                    
                    if created:
                        self.stats['originators']['created'] += 1
                        if sorts_processed <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                            self.log(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä: {originator_name}")
                    else:
                        if originator.name != originator_name or originator.is_deleted:
                            originator.name = originator_name
                            originator.is_deleted = False
                            originator.synced_at = timezone.now()
                            originator.save()
                            self.stats['originators']['updated'] += 1
                        else:
                            self.stats['originators']['skipped'] += 1
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å SortOriginator
                    sort_originator, created = SortOriginator.objects.get_or_create(
                        sort_record=sort_record,
                        originator=originator,
                        defaults={'percentage': percentage}
                    )
                    
                    if created:
                        self.stats['originators']['created'] += 1
                        if sorts_processed <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                            self.log(f"  üîó –°–≤—è–∑—å: {sort_name} ‚Üí {originator_name} ({percentage}%)")
                    elif sort_originator.percentage != percentage:
                        sort_originator.percentage = percentage
                        sort_originator.save()
                        self.stats['originators']['updated'] += 1
                        
            except Exception as e:
                self.log(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∞ {sort_id}: {e}", 'ERROR')
                self.stats['originators']['errors'] += 1
        
        self.log(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ—Ä—Ç–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏: {sorts_processed}")
    
    def sync_originators(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ endpoint"""
        self.log("üë• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤...")
        
        patents_originators = self.client.get_all_originators()
        self.log(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –∏–∑ Patents: {len(patents_originators)}")
        
        for i, originator_data in enumerate(patents_originators, 1):
            originator_id = originator_data.get('id')
            name = originator_data.get('name', '')
            
            if not originator_id or not name:
                self.stats['originators']['errors'] += 1
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤
            if i % 100 == 0:
                self.log(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(patents_originators)}...")
            
            try:
                if self.dry_run:
                    if i <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –≤ dry-run
                        self.log(f"  [DRY] –û—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä: {name} (ID: {originator_id})")
                    self.stats['originators']['skipped'] += 1
                    continue
                
                originator, created = Originator.objects.get_or_create(
                    originator_id=originator_id,
                    defaults={
                        'name': name,
                        'is_deleted': False,
                        'synced_at': timezone.now()
                    }
                )
                
                if created:
                    if i <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                        self.log(f"  ‚úÖ {i:2d}. –°–æ–∑–¥–∞–Ω: {name} (ID: {originator_id})")
                    self.stats['originators']['created'] += 1
                else:
                    if originator.name != name or originator.is_deleted:
                        originator.name = name
                        originator.is_deleted = False
                        originator.synced_at = timezone.now()
                        originator.save()
                        if i <= 10:
                            self.log(f"  üîÑ {i:2d}. –û–±–Ω–æ–≤–ª–µ–Ω: {name} (ID: {originator_id})")
                        self.stats['originators']['updated'] += 1
                    else:
                        self.stats['originators']['skipped'] += 1
                        
            except Exception as e:
                self.log(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–∞ {originator_id}: {e}", 'ERROR')
                self.stats['originators']['errors'] += 1
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.log("=" * 80)
        self.log("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        self.log("=" * 80)
        
        for data_type, stats in self.stats.items():
            if any(stats.values()):
                self.log(f"\n{data_type.upper()}:")
                if stats['created'] > 0:
                    self.log(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {stats['created']}")
                if stats['updated'] > 0:
                    self.log(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}")
                if stats['skipped'] > 0:
                    self.log(f"  ‚äò –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
                if stats['errors'] > 0:
                    self.log(f"  ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã –≤ –ë–î
        self.log(f"\nüìà –ò–¢–û–ì–û –í –ë–î:")
        self.log(f"  –°–æ—Ä—Ç–æ–≤: {SortRecord.objects.filter(is_deleted=False).count()}")
        self.log(f"  –ö—É–ª—å—Ç—É—Ä: {Culture.objects.filter(is_deleted=False).count()}")
        self.log(f"  –ì—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä: {GroupCulture.objects.filter(is_deleted=False).count()}")
        self.log(f"  –û—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤: {Originator.objects.filter(is_deleted=False).count()}")
        self.log(f"  –°–≤—è–∑–µ–π SortOriginator: {SortOriginator.objects.count()}")
        
        self.log("=" * 80)
        if self.dry_run:
            self.log("üîç DRY-RUN –ó–ê–í–ï–†–®–ï–ù - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            self.log("‚úÖ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        start_time = datetime.now()
        
        if self.dry_run:
            self.log("üîç –ó–ê–ü–£–°–ö –í –†–ï–ñ–ò–ú–ï DRY-RUN")
        else:
            self.log("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        
        self.log(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä
            self.sync_group_cultures()
            
            # 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—É–ª—å—Ç—É—Ä
            self.sync_cultures()
            
            # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π –∫—É–ª—å—Ç—É—Ä —Å –≥—Ä—É–ø–ø–∞–º–∏
            self.sync_culture_group_links()
            
            # 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–æ–≤
            self.sync_sorts()
            
            # 5. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ endpoint
            self.sync_originators()
            
            # 6. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π —Å–æ—Ä—Ç–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏
            self.sync_originators_from_sorts()
            
        except Exception as e:
            self.log(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", 'ERROR')
            raise
        
        end_time = datetime.now()
        duration = end_time - start_time
        
        self.log(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
        
        self.print_summary()


def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Patents Service')
    parser.add_argument('--dry-run', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--limit', type=int, help='–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    sync = FullSyncFromPatents(dry_run=args.dry_run, limit=args.limit)
    sync.run()


if __name__ == '__main__':
    main()
