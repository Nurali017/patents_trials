# Generated by Django 3.2.25 on 2025-10-16 08:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('application_number', models.CharField(help_text='Уникальный номер заявки (например, APP-2025-001)', max_length=100, unique=True)),
                ('submission_date', models.DateField(help_text='Дата подачи заявки')),
                ('applicant', models.CharField(help_text='Организация-заявитель', max_length=512)),
                ('applicant_inn_bin', models.CharField(blank=True, help_text='ИНН/БИН заявителя (12 цифр)', max_length=12, null=True)),
                ('contact_person_name', models.CharField(blank=True, help_text='ФИО контактного лица', max_length=255, null=True)),
                ('contact_person_phone', models.CharField(blank=True, help_text='Телефон контактного лица', max_length=50, null=True)),
                ('contact_person_email', models.CharField(blank=True, help_text='Email контактного лица', max_length=255, null=True)),
                ('maturity_group', models.CharField(blank=True, choices=[('D01', 'D01'), ('D02', 'D02'), ('D03', 'D03'), ('D04', 'D04'), ('D05', 'D05'), ('D06', 'D06'), ('D07', 'D07'), ('D08', 'D08'), ('D09', 'D09'), ('D10', 'D10')], help_text='Группа спелости D-коды (D01-D10)', max_length=3, null=True)),
                ('purpose', models.TextField(blank=True, help_text='Цель испытаний', null=True)),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('submitted', 'Подана'), ('distributed', 'Распределена по областям'), ('in_progress', 'Испытания проводятся'), ('completed', 'Испытания завершены'), ('registered', 'Включен в реестр'), ('rejected', 'Отклонен')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Заявка на испытание',
                'verbose_name_plural': 'Заявки на испытания',
                'ordering': ['-submission_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClimateZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='Название природно-климатической зоны', max_length=255, unique=True)),
                ('code', models.CharField(help_text='Код зоны (например: forest-steppe)', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Описание климатической зоны', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Природно-климатическая зона',
                'verbose_name_plural': 'Природно-климатические зоны',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Culture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('culture_id', models.IntegerField(db_index=True, help_text='ID культуры в Patents Service', unique=True)),
                ('name', models.CharField(help_text='Название культуры', max_length=128)),
                ('code', models.CharField(blank=True, help_text='Код культуры', max_length=128, null=True)),
                ('synced_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Культура',
                'verbose_name_plural': 'Культуры',
                'ordering': ['group_culture__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='GroupCulture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('group_culture_id', models.IntegerField(db_index=True, help_text='ID группы культур в Patents Service', unique=True)),
                ('name', models.CharField(help_text='Название группы культур', max_length=128)),
                ('description', models.TextField(blank=True, help_text='Описание группы')),
                ('code', models.CharField(blank=True, help_text='Код группы', max_length=64, null=True)),
                ('synced_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Группа культур',
                'verbose_name_plural': 'Группы культур',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('code', models.CharField(help_text='Уникальный код показателя (например: yield, protein_content)', max_length=100, unique=True)),
                ('name', models.CharField(help_text='Название показателя', max_length=255)),
                ('unit', models.CharField(blank=True, help_text='Единица измерения', max_length=50, null=True)),
                ('description', models.TextField(blank=True, help_text='Описание показателя', null=True)),
                ('is_numeric', models.BooleanField(default=True, help_text='Числовой показатель?')),
                ('category', models.CharField(choices=[('common', 'Общий показатель'), ('quality', 'Показатель качества'), ('specific', 'Специфический показатель')], default='common', help_text='Категория показателя', max_length=20)),
                ('is_quality', models.BooleanField(default=False, help_text='Показатель качества (дополнительные показатели)')),
                ('sort_order', models.IntegerField(default=0, help_text='Порядок отображения в списках')),
                ('is_universal', models.BooleanField(default=False, help_text='Универсальный показатель (применим ко всем культурам)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group_cultures', models.ManyToManyField(blank=True, help_text='Группы культур, для которых применим этот показатель', related_name='indicators', to='trials_app.GroupCulture')),
            ],
            options={
                'verbose_name': 'Показатель',
                'verbose_name_plural': 'Показатели',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Oblast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Область',
                'verbose_name_plural': 'Области',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Originator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('originator_id', models.IntegerField(db_index=True, help_text='ID оригинатора в Patents Service', unique=True)),
                ('name', models.CharField(help_text='Название оригинатора', max_length=512)),
                ('synced_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Оригинатор',
                'verbose_name_plural': 'Оригинаторы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('address', models.TextField(blank=True, help_text='Адрес сортоиспытательного участка', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('climate_zone', models.ForeignKey(blank=True, help_text='Природно-климатическая зона', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='regions', to='trials_app.climatezone')),
                ('oblast', models.ForeignKey(help_text='Область', on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='trials_app.oblast')),
            ],
            options={
                'verbose_name': 'Сортоучасток (ГСУ)',
                'verbose_name_plural': 'Сортоучастки (ГСУ)',
                'ordering': ['oblast__name', 'name'],
                'unique_together': {('name', 'oblast')},
            },
        ),
        migrations.CreateModel(
            name='SortRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('sort_id', models.IntegerField(db_index=True, help_text='ID сорта в Patents Service', unique=True)),
                ('name', models.CharField(default='', help_text='Название сорта (заполняется при синхронизации)', max_length=255)),
                ('public_code', models.CharField(blank=True, help_text='Публичный код сорта', max_length=128, null=True)),
                ('patents_status', models.IntegerField(blank=True, choices=[(1, 'MAIN - Основной реестр'), (2, 'TESTING - Испытания'), (3, 'ARCHIVE - Архив')], help_text='Статус сорта в Patents Service (1=MAIN, 2=TESTING, 3=ARCHIVE)', null=True)),
                ('lifestyle', models.IntegerField(blank=True, choices=[(1, 'Яровой'), (2, 'Озимый'), (3, 'Дерево'), (4, 'Кустарник'), (5, 'Полукустарник'), (6, 'Трава')], help_text='Жизненная форма', null=True)),
                ('characteristic', models.IntegerField(blank=True, choices=[(1, 'Сорт'), (2, 'Гибрид'), (3, 'Линия'), (4, 'Клон')], help_text='Характеристика', null=True)),
                ('development_cycle', models.IntegerField(blank=True, choices=[(1, 'Однолетний'), (2, 'Многолетний')], help_text='Цикл развития', null=True)),
                ('applicant', models.CharField(blank=True, default='', help_text='Заявитель', max_length=512, null=True)),
                ('patent_nis', models.BooleanField(blank=True, default=False, help_text='Патент НИИС', null=True)),
                ('note', models.TextField(blank=True, default='', help_text='Примечание из Patents Service', null=True)),
                ('trial_notes', models.TextField(blank=True, help_text='Примечания по сорту в контексте испытаний (локальные)', null=True)),
                ('synced_at', models.DateTimeField(blank=True, help_text='Дата последней синхронизации с Patents Service', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('culture', models.ForeignKey(blank=True, help_text='Культура сорта', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sort_records', to='trials_app.culture')),
            ],
            options={
                'verbose_name': 'Запись о сорте',
                'verbose_name_plural': 'Записи о сортах',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Trial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('area_ha', models.DecimalField(blank=True, decimal_places=4, help_text='Площадь испытания, га', max_digits=10, null=True)),
                ('planting_season', models.CharField(choices=[('spring', 'Весна'), ('autumn', 'Осень')], default='spring', help_text='Сезон посева', max_length=20)),
                ('agro_background', models.CharField(blank=True, choices=[('favorable', 'Благоприятный'), ('moderate', 'Умеренный'), ('unfavorable', 'Неблагоприятный')], help_text='Агрономический фон', max_length=20, null=True)),
                ('growing_conditions', models.CharField(blank=True, choices=[('rainfed', 'Богара'), ('irrigated', 'Орошение'), ('mixed', 'Смешанное')], help_text='Условия выращивания', max_length=20, null=True)),
                ('cultivation_technology', models.CharField(blank=True, choices=[('traditional', 'Обычная'), ('minimal', 'Минимальная обработка'), ('no_till', 'No-till (нулевая)'), ('organic', 'Органическая')], help_text='Технология возделывания', max_length=20, null=True)),
                ('growing_method', models.CharField(blank=True, choices=[('soil_traditional', 'Традиционное в почве'), ('hydroponics', 'Гидропоника'), ('greenhouse', 'Защищенный грунт'), ('raised_beds', 'Приподнятые грядки'), ('containers', 'Контейнерное')], help_text='Способ выращивания', max_length=20, null=True)),
                ('harvest_timing', models.CharField(blank=True, choices=[('very_early', 'Очень ранняя'), ('early', 'Ранняя'), ('medium_early', 'Среднеранняя'), ('medium', 'Средняя'), ('medium_late', 'Среднепоздняя'), ('late', 'Поздняя'), ('very_late', 'Очень поздняя')], help_text='Сроки уборки', max_length=20, null=True)),
                ('harvest_date', models.DateField(blank=True, help_text='Конкретная дата уборки', null=True)),
                ('additional_info', models.TextField(blank=True, help_text='Дополнительные примечания', null=True)),
                ('status', models.CharField(choices=[('planned', 'Запланировано'), ('active', 'Проводится'), ('completed_008', 'Уборка завершена'), ('lab_sample_sent', 'Образец в лаборатории'), ('lab_completed', 'Лабораторный анализ завершен'), ('completed', 'Завершено'), ('approved', 'Одобрено'), ('continue', 'Продолжить'), ('rejected', 'Отклонено')], default='planned', max_length=20)),
                ('start_date', models.DateField()),
                ('year', models.IntegerField(blank=True, help_text='Год проведения испытания (автоматически из start_date если не указан)', null=True)),
                ('responsible_person', models.CharField(blank=True, help_text='ФИО ответственного сортопыта', max_length=255, null=True)),
                ('decision', models.CharField(blank=True, choices=[('approved', 'Одобрено - рекомендовать к включению в реестр'), ('continue', 'Продолжить испытания - требуются дополнительные данные'), ('rejected', 'Отклонено - не соответствует требованиям')], help_text='Решение комиссии по итогам испытания', max_length=20, null=True)),
                ('decision_justification', models.TextField(blank=True, help_text='Обоснование решения', null=True)),
                ('decision_recommendations', models.TextField(blank=True, help_text='Рекомендации комиссии', null=True)),
                ('decision_date', models.DateField(blank=True, help_text='Дата принятия решения', null=True)),
                ('laboratory_status', models.CharField(blank=True, choices=[('not_required', 'Не требуется'), ('pending', 'Ожидается'), ('sent', 'Отправлено в лабораторию'), ('completed', 'Анализы завершены')], help_text='Статус лабораторных анализов', max_length=20, null=True)),
                ('laboratory_code', models.CharField(blank=True, help_text='Код пробы в лаборатории (LAB-2025-001-ALM)', max_length=100, null=True)),
                ('laboratory_sent_date', models.DateField(blank=True, help_text='Дата отправки образца в лабораторию', null=True)),
                ('laboratory_completed_date', models.DateField(blank=True, help_text='Дата завершения лабораторных анализов', null=True)),
                ('laboratory_sample_weight', models.FloatField(blank=True, help_text='Вес отправленного образца, кг', null=True)),
                ('laboratory_sample_source', models.TextField(blank=True, help_text='Источник образца (из какой делянки, какого участника)', null=True)),
                ('laboratory_notes', models.TextField(blank=True, help_text='Дополнительные примечания по лабораторным анализам', null=True)),
                ('trial_plan_source', models.CharField(blank=True, choices=[('application', 'Из заявки'), ('registry', 'Из реестра'), ('manual', 'Ручное создание')], help_text='Источник создания испытания', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_trials', to=settings.AUTH_USER_MODEL)),
                ('culture', models.ForeignKey(blank=True, help_text='Культура, которая испытывается', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trials', to='trials_app.culture')),
                ('decided_by', models.ForeignKey(blank=True, help_text='Кто принял решение', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='decided_trials', to=settings.AUTH_USER_MODEL)),
                ('indicators', models.ManyToManyField(related_name='trials', to='trials_app.Indicator')),
                ('predecessor_culture', models.ForeignKey(blank=True, help_text='Предшествующая культура', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trials_as_predecessor', to='trials_app.culture')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trials', to='trials_app.region')),
                ('sort_records', models.ManyToManyField(blank=True, related_name='trials', to='trials_app.SortRecord')),
            ],
            options={
                'verbose_name': 'Испытание',
                'verbose_name_plural': 'Испытания',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrialParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('statistical_group', models.IntegerField(choices=[(0, 'Стандарт'), (1, 'Испытываемый')], default=1, help_text='0 = стандарт, 1 = испытываемый')),
                ('statistical_result', models.IntegerField(blank=True, choices=[(-1, 'Существенно ниже стандарта'), (0, 'Несущественное отклонение'), (1, 'Существенно выше стандарта')], help_text='Результат сравнения со стандартом (автоматически)', null=True)),
                ('participant_number', models.IntegerField(help_text='Номер участника в опыте (порядковый)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(blank=True, help_text='Заявка, по которой сорт включен в опыт (если есть)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trial_participations', to='trials_app.application')),
                ('sort_record', models.ForeignKey(help_text='Сорт-участник', on_delete=django.db.models.deletion.CASCADE, related_name='trial_participations', to='trials_app.sortrecord')),
                ('trial', models.ForeignKey(help_text='Сортоопыт', on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='trials_app.trial')),
            ],
            options={
                'verbose_name': 'Участник сортоопыта',
                'verbose_name_plural': 'Участники сортоопытов',
                'ordering': ['trial', 'participant_number'],
                'unique_together': {('trial', 'sort_record'), ('trial', 'participant_number')},
            },
        ),
        migrations.CreateModel(
            name='TrialPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('year', models.IntegerField(help_text='Год проведения испытаний')),
                ('season', models.CharField(choices=[('spring', 'Весна'), ('autumn', 'Осень'), ('summer', 'Лето'), ('winter', 'Зима')], default='spring', help_text='Сезон посадки/посева по умолчанию. Реальный сезон - в TrialPlanTrial.season', max_length=20)),
                ('total_varieties', models.IntegerField(default=0, help_text='Общее количество сортов в плане')),
                ('status', models.CharField(choices=[('planned', 'Запланировано'), ('structured', 'Структурировано'), ('distributed', 'Распределено'), ('finalized', 'Завершено')], default='planned', help_text='Статус плана испытаний', max_length=20)),
                ('participants', models.JSONField(blank=True, default=dict, help_text='JSON структура с участниками плана')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Кто создал план', on_delete=django.db.models.deletion.CASCADE, related_name='created_trial_plans', to=settings.AUTH_USER_MODEL)),
                ('oblast', models.ForeignKey(help_text='Область для испытаний', on_delete=django.db.models.deletion.CASCADE, related_name='trial_plans', to='trials_app.oblast')),
            ],
            options={
                'verbose_name': 'План испытаний',
                'verbose_name_plural': 'Планы испытаний',
                'ordering': ['-year', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrialPlanCulture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Кто добавил культуру в план', on_delete=django.db.models.deletion.CASCADE, related_name='created_trial_plan_cultures', to=settings.AUTH_USER_MODEL)),
                ('culture', models.ForeignKey(help_text='Культура', on_delete=django.db.models.deletion.CASCADE, to='trials_app.culture')),
                ('trial_plan', models.ForeignKey(help_text='План испытаний', on_delete=django.db.models.deletion.CASCADE, related_name='cultures', to='trials_app.trialplan')),
            ],
            options={
                'verbose_name': 'Культура в плане',
                'verbose_name_plural': 'Культуры в планах',
                'unique_together': {('trial_plan', 'culture', 'is_deleted')},
            },
        ),
        migrations.CreateModel(
            name='TrialPlanCultureTrialType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Кто добавил тип испытания', on_delete=django.db.models.deletion.CASCADE, related_name='created_trial_plan_culture_trial_types', to=settings.AUTH_USER_MODEL)),
                ('trial_plan_culture', models.ForeignKey(help_text='Культура в плане испытаний', on_delete=django.db.models.deletion.CASCADE, related_name='trial_types', to='trials_app.trialplanculture')),
            ],
            options={
                'verbose_name': 'Тип испытания в культуре плана',
                'verbose_name_plural': 'Типы испытаний в культурах планов',
            },
        ),
        migrations.CreateModel(
            name='TrialPlanParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('patents_sort_id', models.IntegerField(help_text='ID сорта в Patents Service')),
                ('statistical_group', models.IntegerField(choices=[(0, 'Стандарт'), (1, 'Испытываемый')], default=1, help_text='Статистическая группа')),
                ('seeds_provision', models.CharField(choices=[('provided', 'Предоставлены'), ('not_provided', 'Не предоставлены')], default='not_provided', help_text='Обеспеченность семенами', max_length=20)),
                ('participant_number', models.IntegerField(help_text='Номер участника в плане')),
                ('maturity_group', models.CharField(help_text='Группа спелости (например: M02, M03)', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(blank=True, help_text='Связанная заявка (если участник из заявки)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='trials_app.application')),
                ('created_by', models.ForeignKey(help_text='Кто добавил участника', on_delete=django.db.models.deletion.CASCADE, related_name='created_trial_plan_participants', to=settings.AUTH_USER_MODEL)),
                ('culture_trial_type', models.ForeignKey(help_text='Тип испытания культуры в плане', on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='trials_app.trialplanculturetrialtype')),
            ],
            options={
                'verbose_name': 'Участник плана',
                'verbose_name_plural': 'Участники планов',
                'ordering': ['participant_number'],
                'unique_together': {('culture_trial_type', 'participant_number', 'is_deleted')},
            },
        ),
        migrations.CreateModel(
            name='TrialType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('code', models.CharField(help_text='Код типа испытания (например: competitive, oos, dus)', max_length=50, unique=True)),
                ('name', models.CharField(help_text='Название типа испытания', max_length=255)),
                ('name_full', models.CharField(blank=True, help_text='Полное название с расшифровкой', max_length=512)),
                ('category', models.CharField(choices=[('mandatory', 'Обязательное'), ('additional', 'Дополнительное'), ('special', 'Специальное'), ('reproduction', 'Размножение'), ('demonstration', 'Демонстрационное')], default='mandatory', help_text='Категория испытания', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Описание и методика', null=True)),
                ('requires_area', models.BooleanField(default=True, help_text='Требуется указание площади')),
                ('requires_standard', models.BooleanField(default=True, help_text='Требуется стандартный сорт для сравнения')),
                ('default_area_ha', models.DecimalField(blank=True, decimal_places=4, help_text='Рекомендуемая площадь, га', max_digits=10, null=True)),
                ('sort_order', models.IntegerField(default=0, help_text='Порядок в списках')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Тип испытания',
                'verbose_name_plural': 'Типы испытаний',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TrialPlanTrial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('predecessor', models.CharField(help_text="Предшественник (например: 'fallow', 'wheat', 'barley')", max_length=50)),
                ('seeding_rate', models.FloatField(help_text='Норма высева')),
                ('season', models.CharField(choices=[('spring', 'Весна'), ('autumn', 'Осень'), ('summer', 'Лето'), ('winter', 'Зима')], default='spring', help_text='Сезон посадки/посева (на уровне trial)', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Кто создал испытание', on_delete=django.db.models.deletion.CASCADE, related_name='created_trial_plan_trials', to=settings.AUTH_USER_MODEL)),
                ('participant', models.ForeignKey(help_text='Участник плана', on_delete=django.db.models.deletion.CASCADE, related_name='trials', to='trials_app.trialplanparticipant')),
                ('region', models.ForeignKey(help_text='Регион (ГСУ) для проведения испытания', on_delete=django.db.models.deletion.CASCADE, to='trials_app.region')),
            ],
            options={
                'verbose_name': 'Испытание в плане',
                'verbose_name_plural': 'Испытания в планах',
                'ordering': ['region__name'],
            },
        ),
        migrations.AddField(
            model_name='trialplanculturetrialtype',
            name='trial_type',
            field=models.ForeignKey(help_text='Тип испытания (КСИ, ООС, ДЮС)', on_delete=django.db.models.deletion.PROTECT, related_name='plan_culture_trial_types', to='trials_app.trialtype'),
        ),
        migrations.AddField(
            model_name='trialplan',
            name='trial_type',
            field=models.ForeignKey(blank=True, help_text='Тип испытания по умолчанию (КСИ, ООС, ДЮС). Реальный тип - в TrialPlanTrial.trial_type', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='trial_plans', to='trials_app.trialtype'),
        ),
        migrations.AddField(
            model_name='trial',
            name='trial_plan',
            field=models.ForeignKey(blank=True, help_text='План, из которого создано испытание', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trials', to='trials_app.trialplan'),
        ),
        migrations.AddField(
            model_name='trial',
            name='trial_type',
            field=models.ForeignKey(blank=True, help_text='Тип испытания (КСИ, ООС, ДЮС и т.д.)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='trials', to='trials_app.trialtype'),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('document_type', models.CharField(choices=[('application_for_testing', 'Заявление на испытание'), ('breeding_questionnaire', 'Анкета селекционного достижения'), ('variety_description', 'Описание сорта'), ('plant_photo_with_ruler', 'Фото растения с линейкой'), ('right_to_submit', 'Документ о праве подачи'), ('gmo_free', 'Документ об отсутствии ГМО'), ('report', 'Отчет'), ('protocol', 'Протокол'), ('certificate', 'Сертификат'), ('decision', 'Решение комиссии'), ('other', 'Другое')], default='other', max_length=30)),
                ('file', models.FileField(upload_to='documents/%Y/%m/%d/')),
                ('description', models.TextField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_mandatory', models.BooleanField(default=False, help_text='Обязательный документ для заявки')),
                ('application', models.ForeignKey(blank=True, help_text='Заявка, к которой относится документ', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='trials_app.application')),
                ('trial', models.ForeignKey(blank=True, help_text='Испытание, к которому относится документ', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='trials_app.trial')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Документ',
                'verbose_name_plural': 'Документы',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.AddField(
            model_name='culture',
            name='group_culture',
            field=models.ForeignKey(blank=True, help_text='Группа культур', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cultures', to='trials_app.groupculture'),
        ),
        migrations.AddField(
            model_name='application',
            name='sort_record',
            field=models.ForeignKey(help_text='Сорт, который испытывается', on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='trials_app.sortrecord'),
        ),
        migrations.AddField(
            model_name='application',
            name='target_oblasts',
            field=models.ManyToManyField(help_text='Целевые области для проведения испытаний', related_name='applications', to='trials_app.Oblast'),
        ),
        migrations.CreateModel(
            name='AnnualDecisionTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('year', models.IntegerField(help_text='Год составления таблицы (например: 2024)')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('finalized', 'Завершена')], default='draft', help_text='Статус таблицы', max_length=20)),
                ('title', models.CharField(blank=True, help_text='Название таблицы (автоматически генерируется)', max_length=512)),
                ('finalized_date', models.DateField(blank=True, help_text='Дата завершения таблицы', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Кто создал таблицу', on_delete=django.db.models.deletion.CASCADE, related_name='annual_tables_created', to=settings.AUTH_USER_MODEL)),
                ('culture', models.ForeignKey(blank=True, help_text='Культура (опционально, для фильтрации)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='annual_decision_tables', to='trials_app.culture')),
                ('finalized_by', models.ForeignKey(blank=True, help_text='Кто завершил таблицу', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='annual_tables_finalized', to=settings.AUTH_USER_MODEL)),
                ('oblast', models.ForeignKey(help_text='Область', on_delete=django.db.models.deletion.CASCADE, related_name='annual_decision_tables', to='trials_app.oblast')),
            ],
            options={
                'verbose_name': 'Годовая таблица решений',
                'verbose_name_plural': 'Годовые таблицы решений',
                'ordering': ['-year', '-created_at'],
                'unique_together': {('year', 'oblast', 'culture')},
            },
        ),
        migrations.CreateModel(
            name='TrialResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('value', models.FloatField(blank=True, help_text='Среднее значение или общее значение', null=True)),
                ('plot_1', models.FloatField(blank=True, help_text='Делянка 1', null=True)),
                ('plot_2', models.FloatField(blank=True, help_text='Делянка 2', null=True)),
                ('plot_3', models.FloatField(blank=True, help_text='Делянка 3', null=True)),
                ('plot_4', models.FloatField(blank=True, help_text='Делянка 4', null=True)),
                ('text_value', models.TextField(blank=True, help_text='Текстовое значение (для нечисловых показателей)', null=True)),
                ('measurement_date', models.DateField(blank=True, help_text='Дата измерения', null=True)),
                ('notes', models.TextField(blank=True, help_text='Примечания', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Кто внес данные (сортопыт)', on_delete=django.db.models.deletion.CASCADE, related_name='trial_results_created', to=settings.AUTH_USER_MODEL)),
                ('indicator', models.ForeignKey(help_text='Показатель', on_delete=django.db.models.deletion.CASCADE, related_name='trial_results', to='trials_app.indicator')),
                ('participant', models.ForeignKey(blank=True, help_text='Участник сортоопыта', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='results', to='trials_app.trialparticipant')),
                ('sort_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trial_results', to='trials_app.sortrecord')),
                ('trial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='results', to='trials_app.trial')),
            ],
            options={
                'verbose_name': 'Результат испытания',
                'verbose_name_plural': 'Результаты испытаний',
                'ordering': ['-measurement_date'],
                'unique_together': {('participant', 'indicator')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='trialplanculturetrialtype',
            unique_together={('trial_plan_culture', 'trial_type', 'is_deleted')},
        ),
        migrations.CreateModel(
            name='TrialLaboratoryResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('value', models.FloatField(blank=True, help_text='Числовое значение показателя', null=True)),
                ('text_value', models.TextField(blank=True, help_text='Текстовое значение (для нечисловых показателей)', null=True)),
                ('laboratory_code', models.CharField(blank=True, help_text='Код пробы в лаборатории (LAB-2025-001-ALM)', max_length=100, null=True)),
                ('analysis_date', models.DateField(blank=True, help_text='Дата проведения анализа', null=True)),
                ('sample_weight_kg', models.FloatField(blank=True, help_text='Вес отправленного образца, кг', null=True)),
                ('notes', models.TextField(blank=True, help_text='Примечания от лаборатории', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Сотрудник лаборатории, внесший данные', on_delete=django.db.models.deletion.CASCADE, related_name='trial_laboratory_results_created', to=settings.AUTH_USER_MODEL)),
                ('indicator', models.ForeignKey(help_text='Показатель качества', on_delete=django.db.models.deletion.CASCADE, related_name='trial_laboratory_results', to='trials_app.indicator')),
                ('participant', models.ForeignKey(blank=True, help_text='Участник, от которого взята проба (опционально)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='laboratory_results', to='trials_app.trialparticipant')),
                ('trial', models.ForeignKey(help_text='Испытание, для которого проводился анализ', on_delete=django.db.models.deletion.CASCADE, related_name='laboratory_results', to='trials_app.trial')),
            ],
            options={
                'verbose_name': 'Лабораторный результат испытания',
                'verbose_name_plural': 'Лабораторные результаты испытаний',
                'ordering': ['-analysis_date', '-created_at'],
                'unique_together': {('trial', 'indicator', 'participant')},
            },
        ),
        migrations.CreateModel(
            name='SortOriginator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.PositiveIntegerField(default=100, help_text='Процент вклада оригинатора (сумма должна быть 100)')),
                ('originator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sort_originators', to='trials_app.originator')),
                ('sort_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sort_originators', to='trials_app.sortrecord')),
            ],
            options={
                'verbose_name': 'Оригинатор сорта',
                'verbose_name_plural': 'Оригинаторы сортов',
                'unique_together': {('sort_record', 'originator')},
            },
        ),
        migrations.CreateModel(
            name='PlannedDistribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('planting_season', models.CharField(blank=True, help_text='Сезон посадки (spring/autumn/summer)', max_length=50, null=True)),
                ('status', models.CharField(choices=[('planned', 'Запланировано'), ('in_progress', 'Испытания идут'), ('approved', 'Одобрено'), ('rejected', 'Отклонено'), ('cancelled', 'Отменено')], default='planned', help_text='Статус распределения', max_length=20)),
                ('year_started', models.IntegerField(blank=True, help_text='Год начала испытаний', null=True)),
                ('year_completed', models.IntegerField(blank=True, help_text='Год завершения испытаний (если завершено)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Дополнительные заметки', null=True)),
                ('application', models.ForeignKey(help_text='Заявка', on_delete=django.db.models.deletion.CASCADE, related_name='planned_distributions_records', to='trials_app.application')),
                ('created_by', models.ForeignKey(help_text='Кто создал распределение', on_delete=django.db.models.deletion.CASCADE, related_name='created_distributions', to=settings.AUTH_USER_MODEL)),
                ('region', models.ForeignKey(help_text='ГСУ для проведения испытания', on_delete=django.db.models.deletion.PROTECT, related_name='planned_distributions', to='trials_app.region')),
                ('trial_type', models.ForeignKey(blank=True, help_text='Тип испытания', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='planned_distributions', to='trials_app.trialtype')),
            ],
            options={
                'verbose_name': 'Плановое распределение',
                'verbose_name_plural': 'Плановые распределения',
                'ordering': ['-created_at'],
                'unique_together': {('application', 'region')},
            },
        ),
        migrations.CreateModel(
            name='AnnualDecisionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('row_number', models.IntegerField(help_text='Порядковый номер строки (№ п/п)')),
                ('maturity_group', models.CharField(blank=True, help_text='Группа спелости (1, 2, 3, 4, 5)', max_length=10, null=True)),
                ('yields_by_year', models.JSONField(default=dict, help_text='Урожайность по годам: {2022: 125, 2023: 210, 2024: 97}')),
                ('average_yield', models.FloatField(blank=True, help_text='Средняя урожайность за все годы (ц/га)', null=True)),
                ('deviation_from_standard', models.FloatField(blank=True, help_text='Отклонение от стандарта (ц/га)', null=True)),
                ('last_year_data', models.JSONField(default=dict, help_text='\n        Все показатели качества последнего года:\n        {\n            "tuber_weight": 142,\n            "taste_score": 5,\n            "marketable_percentage": 92.5,\n            "damage_resistance": 95,\n            "diseases": {...},\n            "pests": {...},\n            "biochemistry": {...}\n        }\n        ')),
                ('years_tested', models.IntegerField(help_text='Количество лет испытаний (1, 2 или 3)')),
                ('year_started', models.IntegerField(help_text='Год начала испытаний (например: 2022)')),
                ('decision', models.CharField(choices=[('pending', 'Ожидает решения'), ('approved', 'Одобрено к включению в Госреестр'), ('continue', 'Продолжить испытания'), ('removed', 'Снять с испытаний')], default='pending', help_text='Решение по сорту', max_length=20)),
                ('decision_justification', models.TextField(blank=True, help_text='Обоснование принятого решения', null=True)),
                ('decision_recommendations', models.TextField(blank=True, help_text='Рекомендации по возделыванию и использованию', null=True)),
                ('recommended_zones', models.JSONField(blank=True, default=list, help_text='\n        Рекомендуемые климатические зоны и ГСУ:\n        [\n            {\n                "climate_zone_id": 1,\n                "climate_zone_name": "Лесостепная",\n                "region_ids": [1, 2, 3]\n            }\n        ]\n        ')),
                ('continue_reason', models.CharField(blank=True, help_text='Причина продления испытаний', max_length=255, null=True)),
                ('continue_until_year', models.IntegerField(blank=True, help_text='До какого года продлить испытания', null=True)),
                ('removal_reason', models.CharField(blank=True, help_text='Причина снятия с испытаний', max_length=255, null=True)),
                ('decision_date', models.DateField(blank=True, help_text='Дата принятия решения', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('annual_table', models.ForeignKey(help_text='Годовая таблица', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='trials_app.annualdecisiontable')),
                ('decided_by', models.ForeignKey(blank=True, help_text='Кто принял решение', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='annual_decisions_made', to=settings.AUTH_USER_MODEL)),
                ('sort_record', models.ForeignKey(help_text='Сорт', on_delete=django.db.models.deletion.CASCADE, related_name='annual_decision_items', to='trials_app.sortrecord')),
            ],
            options={
                'verbose_name': 'Элемент годовой таблицы',
                'verbose_name_plural': 'Элементы годовых таблиц',
                'ordering': ['annual_table', 'row_number'],
                'unique_together': {('annual_table', 'sort_record')},
            },
        ),
    ]
