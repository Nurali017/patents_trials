"""
Management command –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π

1. –£–¥–∞–ª—è–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
2. –ü–æ–º–µ—á–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ
3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py optimize_indicators
    python manage.py optimize_indicators --confirm  # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
    python manage.py optimize_indicators --dry-run  # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ
    
–û–±–Ω–æ–≤–ª–µ–Ω–æ: 2025-01-10
"""

from django.core.management.base import BaseCommand
from trials_app.models import Indicator


class Command(BaseCommand):
    help = '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: —É–¥–∞–ª–∏—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ, –ø–æ–º–µ—Ç–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--confirm',
            action='store_true',
            help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        )

    def handle(self, *args, **options):
        self.confirm = options['confirm']
        self.dry_run = options['dry_run']
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING('üîç DRY-RUN —Ä–µ–∂–∏–º - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n'))
        
        self.stdout.write('üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô...\n')
        
        # 1. –£–¥–∞–ª–∏—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        self.remove_redundant_indicators()
        
        # 2. –ü–æ–º–µ—Ç–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        self.mark_required_indicators()
        
        # 3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
        self.setup_validation_rules()
        
        # 4. –ü–æ–º–µ—Ç–∏—Ç—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–∫ –Ω–µ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ
        self.mark_subjective_indicators()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()

    def remove_redundant_indicators(self):
        """–£–¥–∞–ª–∏—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"""
        self.stdout.write(self.style.HTTP_INFO('üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ò–ó–ë–´–¢–û–ß–ù–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô'))
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        redundant_codes = [
            'head_density',           # –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ—á–∞–Ω–∞ - —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ
            'ripening_uniformity',    # –í—ã—Ä–∞–≤–Ω–µ–Ω–Ω–æ—Å—Ç—å —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è - —Å–ª–æ–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å
            'bolting_resistance',     # –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Ü–≤–µ—Ç—É—à–Ω–æ—Å—Ç–∏ - —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        ]
        
        indicators_to_remove = Indicator.objects.filter(
            code__in=redundant_codes,
            is_deleted=False
        )
        
        if not indicators_to_remove.exists():
            self.stdout.write('  ‚úÖ –ò–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã')
            return
        
        self.stdout.write(f'  üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {indicators_to_remove.count()}')
        
        for indicator in indicators_to_remove:
            self.stdout.write(f'  - {indicator.name} ({indicator.code})')
        
        if not self.dry_run and not self.confirm:
            self.stdout.write(
                self.style.ERROR(
                    '\n‚ùå –£–î–ê–õ–ï–ù–ò–ï –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û!\n'
                    '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --confirm:\n'
                    'python manage.py optimize_indicators --confirm'
                )
            )
            return
        
        if self.dry_run:
            self.stdout.write('  üîç DRY-RUN: –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã')
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        deleted_count = 0
        for indicator in indicators_to_remove:
            indicator.delete()  # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            deleted_count += 1
        
        self.stdout.write(
            self.style.SUCCESS(f'  ‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π')
        )

    def mark_required_indicators(self):
        """–ü–æ–º–µ—Ç–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ"""
        self.stdout.write(self.style.HTTP_INFO('\nüìã –ü–û–ú–ï–¢–ö–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô'))
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ
        required_indicators = [
            'yield',                    # –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å
            'thousand_seed_weight',     # –ú–∞—Å—Å–∞ 1000 —Å–µ–º—è–Ω
            'grain_nature',             # –ù–∞—Ç—É—Ä–∞ –∑–µ—Ä–Ω–∞
            'threshability',            # –û–±–º–æ–ª–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å
            'lodging_drooping_brittleness',  # –ü–æ–Ω–∏–∫–∞–Ω–∏–µ/–ª–æ–º–∫–æ—Å—Ç—å –∫–æ–ª–æ—Å–∞
            'shedding_resistance',      # –û—Å—ã–ø–∞–µ–º–æ—Å—Ç—å
            'protein_content',          # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞
            'vitreousness',             # –°—Ç–µ–∫–ª–æ–≤–∏–¥–Ω–æ—Å—Ç—å
            'green_mass_yield',         # –£—Ä–æ–∂–∞–π –∑–µ–ª–µ–Ω–æ–π –º–∞—Å—Å—ã
            'dry_matter_yield',         # –£—Ä–æ–∂–∞–π —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞
            'dry_matter_content',       # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞
            'fruit_vegetable_weight',   # –°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –ø–ª–æ–¥–∞
            'starch_content_tubers',    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—Ä–∞—Ö–º–∞–ª–∞
            'storability',              # –õ—ë–∂–∫–æ—Å—Ç—å
            'fruit_berry_weight',       # –°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –ø–ª–æ–¥–∞/—è–≥–æ–¥—ã
        ]
        
        updated_count = 0
        for code in required_indicators:
            try:
                indicator = Indicator.objects.get(code=code, is_deleted=False)
                if not indicator.is_required:
                    if not self.dry_run:
                        indicator.is_required = True
                        indicator.save()
                    self.stdout.write(f'  ‚úÖ {indicator.name} - –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π')
                    updated_count += 1
                else:
                    self.stdout.write(f'  ‚úì {indicator.name} - —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π')
            except Indicator.DoesNotExist:
                self.stdout.write(f'  ‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å {code} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        
        if not self.dry_run:
            self.stdout.write(
                self.style.SUCCESS(f'  üìã –ü–æ–º–µ—á–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {updated_count}')
            )

    def setup_validation_rules(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        self.stdout.write(self.style.HTTP_INFO('\nüîç –ù–ê–°–¢–†–û–ô–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò'))
        
        # –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        validation_rules = {
            # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            'marketability': {'min_value': 0, 'max_value': 100, 'precision': 1},
            'deviation_standard_pct': {'min_value': -100, 'max_value': 1000, 'precision': 1},
            'protein_content': {'min_value': 0, 'max_value': 50, 'precision': 1},
            'gluten_content': {'min_value': 0, 'max_value': 50, 'precision': 1},
            'vitreousness': {'min_value': 0, 'max_value': 100, 'precision': 1},
            
            # –ë–∞–ª–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            'variety_rating': {'min_value': 1, 'max_value': 9, 'precision': 0},
            'tasting_score': {'min_value': 1, 'max_value': 5, 'precision': 1},
            'lodging_resistance': {'min_value': 1, 'max_value': 9, 'precision': 0},
            'drought_resistance': {'min_value': 1, 'max_value': 9, 'precision': 0},
            
            # –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å
            'yield': {'min_value': 0, 'max_value': 1000, 'precision': 1},
            'green_mass_yield': {'min_value': 0, 'max_value': 2000, 'precision': 1},
            
            # –ú–∞—Å—Å–∞
            'thousand_seed_weight': {'min_value': 1, 'max_value': 1000, 'precision': 1},
            'fruit_vegetable_weight': {'min_value': 1, 'max_value': 50000, 'precision': 1},
            
            # –ü–µ—Ä–∏–æ–¥—ã
            'vegetation_period': {'min_value': 30, 'max_value': 365, 'precision': 0},
            'days_to_first_harvest': {'min_value': 30, 'max_value': 365, 'precision': 0},
        }
        
        updated_count = 0
        for code, rules in validation_rules.items():
            try:
                indicator = Indicator.objects.get(code=code, is_deleted=False)
                if not self.dry_run:
                    indicator.validation_rules = rules
                    indicator.save()
                self.stdout.write(f'  ‚úÖ {indicator.name} - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è')
                updated_count += 1
            except Indicator.DoesNotExist:
                self.stdout.write(f'  ‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å {code} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        
        if not self.dry_run:
            self.stdout.write(
                self.style.SUCCESS(f'  üîç –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è {updated_count} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π')
            )

    def mark_subjective_indicators(self):
        """–ü–æ–º–µ—Ç–∏—Ç—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞–∫ –Ω–µ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ"""
        self.stdout.write(self.style.HTTP_INFO('\nüé≠ –ü–û–ú–ï–¢–ö–ê –°–£–ë–™–ï–ö–¢–ò–í–ù–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô'))
        
        # –°—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        subjective_codes = [
            'variety_rating',      # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ä—Ç–∞
            'tasting_score',       # –î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        ]
        
        updated_count = 0
        for code in subjective_codes:
            try:
                indicator = Indicator.objects.get(code=code, is_deleted=False)
                if indicator.is_recommended:
                    if not self.dry_run:
                        indicator.is_recommended = False
                        indicator.save()
                    self.stdout.write(f'  ‚úÖ {indicator.name} - –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π (–Ω–µ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π)')
                    updated_count += 1
                else:
                    self.stdout.write(f'  ‚úì {indicator.name} - —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π')
            except Indicator.DoesNotExist:
                self.stdout.write(f'  ‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å {code} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        
        if not self.dry_run:
            self.stdout.write(
                self.style.SUCCESS(f'  üé≠ –ü–æ–º–µ—á–µ–Ω–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {updated_count}')
            )

    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        self.stdout.write('\n' + '='*70)
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING('\nüîç DRY-RUN –ó–ê–í–ï–†–®–ï–ù\n'))
        else:
            self.stdout.write(self.style.SUCCESS('\n‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n'))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total = Indicator.objects.filter(is_deleted=False).count()
            required = Indicator.objects.filter(is_required=True, is_deleted=False).count()
            recommended = Indicator.objects.filter(is_recommended=True, is_deleted=False).count()
            auto_calc = Indicator.objects.filter(is_auto_calculated=True, is_deleted=False).count()
            with_validation = Indicator.objects.exclude(validation_rules={}).filter(is_deleted=False).count()
            
            self.stdout.write(f'   üìä –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {total}')
            self.stdout.write(f'   üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: {required}')
            self.stdout.write(f'   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö: {recommended}')
            self.stdout.write(f'   ü§ñ –ê–≤—Ç–æ—Ä–∞—Å—á–µ—Ç–Ω—ã—Ö: {auto_calc}')
            self.stdout.write(f'   üîç –° –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: {with_validation}')
        
        self.stdout.write('='*70 + '\n')
