"""
Management command –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏—Å–ø—ã—Ç–∞–Ω–∏–π (–≤–µ—Ä—Å–∏—è 2.0 - –±–µ–∑ –¥—É–±–ª–µ–π)

–ü–†–ò–ù–¶–ò–ü: –û–¥–∏–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å ‚Üí –ù–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py load_indicators_v2
    python manage.py load_indicators_v2 --dry-run
    
–û–±–Ω–æ–≤–ª–µ–Ω–æ: 2025-10-13
–ê–≤—Ç–æ—Ä: Trials System
"""

from django.core.management.base import BaseCommand
from trials_app.models import Indicator, Culture, GroupCulture


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π V2 (–æ–¥–∏–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø)'

    def __init__(self):
        super().__init__()
        self.missing_groups = []
        self.created_count = 0
        self.updated_count = 0
        self.cultures_linked = 0

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î',
        )

    def handle(self, *args, **options):
        self.dry_run = options['dry_run']
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING('üîç DRY-RUN —Ä–µ–∂–∏–º\n'))
        
        self.stdout.write('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π V2.0 (–±–µ–∑ –¥—É–±–ª–µ–π)...\n')
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        self.load_common_indicators()
        self.load_specific_indicators()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()

    def create_indicator(self, code, name, unit, category='common', is_quality=False, 
                        sort_order=0, group_codes=None, description='', is_auto_calculated=False, 
                        calculation_formula='', is_required=False, is_recommended=True):
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≥—Ä—É–ø–ø–∞–º"""
        if self.dry_run:
            self.stdout.write(f'  [DRY-RUN] {name} ({unit or "–±–∞–ª–ª"})')
            return None
        
        # –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        indicator, created = Indicator.objects.update_or_create(
            code=code,
            defaults={
                'name': name,
                'unit': unit,
                'category': category,
                'is_quality': is_quality,
                'sort_order': sort_order,
                'is_universal': False,
                'description': description,
                'is_numeric': True,
                'is_auto_calculated': is_auto_calculated,
                'calculation_formula': calculation_formula,
                'is_required': is_required,
                'is_recommended': is_recommended,
            }
        )
        
        if created:
            self.created_count += 1
            status = '‚úÖ –°–æ–∑–¥–∞–Ω'
        else:
            self.updated_count += 1
            status = 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω'
        
        self.stdout.write(f'  {status}: {name} ({unit or "–±–∞–ª–ª"})')
        
        # –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∫—É–ª—å—Ç—É—Ä–∞–º —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã
        if group_codes:
            self._link_to_groups(indicator, group_codes)
        
        return indicator

    def _link_to_groups(self, indicator, group_codes):
        """–ü—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫ –≥—Ä—É–ø–ø–∞–º –∫—É–ª—å—Ç—É—Ä (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)"""
        groups = []
        
        for group_code in group_codes:
            try:
                group = GroupCulture.objects.get(code=group_code, is_deleted=False)
                groups.append(group)
                
            except GroupCulture.DoesNotExist:
                if group_code not in self.missing_groups:
                    self.missing_groups.append(group_code)
                    self.stdout.write(
                        self.style.WARNING(f'    ‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ "{group_code}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
                    )
        
        if groups:
            # –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –≥—Ä—É–ø–ø–∞–º (–∞ –Ω–µ –∫ –∫—É–ª—å—Ç—É—Ä–∞–º!)
            indicator.group_cultures.set(groups)
            
            # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫—É–ª—å—Ç—É—Ä –ø–æ–ª—É—á–∏—Ç —ç—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
            total_cultures = Culture.objects.filter(
                group_culture__in=groups,
                is_deleted=False
            ).distinct().count()
            
            self.cultures_linked += total_cultures
            self.stdout.write(
                self.style.SUCCESS(
                    f'    ‚úì –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –≥—Ä—É–ø–ø–∞–º: {[g.name for g in groups]}'
                )
            )
            self.stdout.write(
                self.style.SUCCESS(
                    f'    ‚úì –û—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫—É–ª—å—Ç—É—Ä: {total_cultures}'
                )
            )

    # ========== –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò ==========
    
    def load_common_indicators(self):
        """–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä"""
        self.stdout.write(self.style.HTTP_INFO('\nüìä –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò'))
        
        # 1. –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (–ø–æ—á—Ç–∏ –≤—Å–µ –≥—Ä—É–ø–ø—ã) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–û –ú–ï–¢–û–î–ò–ö–ï
        self.create_indicator(
            code='yield',
            name='–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å',
            unit='—Ü/–≥–∞',
            category='common',
            is_quality=False,
            sort_order=1,
            group_codes=['GRAIN', 'LEGUMES', 'OILSEEDS', 'FORAGE', 'VEGETABLES', 'melons', 'FRUITS', 'BERRY'],
            description='–û–±—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫—É–ª—å—Ç—É—Ä',
            is_required=True,
            is_recommended=True
        )
        
        # 2. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (–∑–µ—Ä–Ω–æ–≤—ã–µ, –∑–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã–µ, –º–∞—Å–ª–∏—á–Ω—ã–µ) - –ê–í–¢–û–†–ê–°–ß–ï–¢–ù–´–ï
        self.create_indicator(
            code='deviation_standard_abs',
            name='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (–∞–±—Å–æ–ª—é—Ç–Ω–æ–µ)',
            unit='—Ü/–≥–∞',
            category='common',
            is_quality=False,
            sort_order=2,
            group_codes=['GRAIN', 'LEGUMES', 'OILSEEDS'],
            description='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞ –≤ —Ü/–≥–∞',
            is_auto_calculated=True,
            calculation_formula='–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ - –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞'
        )
        
        self.create_indicator(
            code='deviation_standard_pct',
            name='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (%)',
            unit='%',
            category='common',
            is_quality=False,
            sort_order=3,
            group_codes=['GRAIN', 'LEGUMES', 'OILSEEDS'],
            description='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö',
            is_auto_calculated=True,
            calculation_formula='((–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ - –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞) / –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞) √ó 100'
        )
        
        # 3. –í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–≤—Å–µ –≥—Ä—É–ø–ø—ã)
        self.create_indicator(
            code='vegetation_period',
            name='–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
            unit='–¥–Ω–µ–π',
            category='common',
            is_quality=False,
            sort_order=4,
            group_codes=['GRAIN', 'LEGUMES', 'OILSEEDS', 'FORAGE', 'VEGETABLES', 'melons'],
            description='–ü–µ—Ä–∏–æ–¥ –æ—Ç –ø–æ—Å–µ–≤–∞/–≤—Å—Ö–æ–¥–æ–≤ –¥–æ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è'
        )
        
        # 4. –í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π (–ø–æ—á—Ç–∏ –≤—Å–µ)
        self.create_indicator(
            code='plant_height',
            name='–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π',
            unit='—Å–º',
            category='common',
            is_quality=False,
            sort_order=5,
            group_codes=['GRAIN', 'LEGUMES', 'OILSEEDS', 'FORAGE'],
            description='–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ —Å—Ç–µ–±–ª–µ—Å—Ç–æ—è'
        )
        
        # 5. –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é (–∑–µ—Ä–Ω–æ–≤—ã–µ, –∑–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã–µ, –∫–æ—Ä–º–æ–≤—ã–µ, –º–∞—Å–ª–∏—á–Ω—ã–µ)
        self.create_indicator(
            code='lodging_resistance',
            name='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é',
            unit='–±–∞–ª–ª (1-9)',
            category='common',
            is_quality=False,
            sort_order=6,
            group_codes=['GRAIN', 'LEGUMES', 'FORAGE', 'OILSEEDS'],
            description='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é —Å—Ç–µ–±–ª–µ–π'
        )
        
        # 6. –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∑–∞—Å—É—Ö–µ (–∑–µ—Ä–Ω–æ–≤—ã–µ, –∑–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã–µ, –∫–æ—Ä–º–æ–≤—ã–µ, –º–∞—Å–ª–∏—á–Ω—ã–µ)
        self.create_indicator(
            code='drought_resistance',
            name='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∑–∞—Å—É—Ö–µ',
            unit='–±–∞–ª–ª (1-9)',
            category='common',
            is_quality=False,
            sort_order=7,
            group_codes=['GRAIN', 'LEGUMES', 'FORAGE', 'OILSEEDS'],
            description='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∑–∞—Å—É—à–ª–∏–≤—ã–º —É—Å–ª–æ–≤–∏—è–º'
        )
        
        # 7. –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–æ–ª–µ–∑–Ω—è–º –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º (–≤—Å–µ)
        self.create_indicator(
            code='disease_pest_resistance',
            name='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–æ–ª–µ–∑–Ω—è–º –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º',
            unit='–±–∞–ª–ª (1-9)',
            category='common',
            is_quality=False,
            sort_order=8,
            group_codes=['GRAIN', 'LEGUMES', 'OILSEEDS', 'FORAGE', 'VEGETABLES', 'melons', 'FRUITS', 'BERRY'],
            description='–û–±—â–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–æ–ª–µ–∑–Ω—è–º –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º'
        )
        
        # 8. –ó–∏–º–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å (–∑–µ—Ä–Ω–æ–≤—ã–µ –æ–∑–∏–º—ã–µ, –∑–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã–µ, –∫–æ—Ä–º–æ–≤—ã–µ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ)
        self.create_indicator(
            code='winter_hardiness',
            name='–ó–∏–º–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å',
            unit='–±–∞–ª–ª (1-9)',
            category='common',
            is_quality=False,
            sort_order=9,
            group_codes=['GRAIN', 'LEGUMES', 'FORAGE'],
            description='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∑–∏–º–Ω–∏–º —É—Å–ª–æ–≤–∏—è–º (–¥–ª—è –æ–∑–∏–º—ã—Ö –∏ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏—Ö)'
        )
        
        # 9. –ú–∞—Å—Å–∞ 1000 –∑—ë—Ä–µ–Ω/—Å–µ–º—è–Ω (–∑–µ—Ä–Ω–æ–≤—ã–µ, –∑–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã–µ, –∫–æ—Ä–º–æ–≤—ã–µ, –º–∞—Å–ª–∏—á–Ω—ã–µ)
        self.create_indicator(
            code='thousand_seed_weight',
            name='–ú–∞—Å—Å–∞ 1000 –∑—ë—Ä–µ–Ω/—Å–µ–º—è–Ω',
            unit='–≥',
            category='common',
            is_quality=False,
            sort_order=10,
            group_codes=['GRAIN', 'LEGUMES', 'FORAGE', 'OILSEEDS'],
            description='–ú–∞—Å—Å–∞ 1000 —Å–µ–º—è–Ω –∏–ª–∏ –∑—ë—Ä–µ–Ω'
        )
        
        # 10. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ä—Ç–∞ (–∑–µ—Ä–Ω–æ–≤—ã–µ, –∑–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã–µ, –º–∞—Å–ª–∏—á–Ω—ã–µ)
        self.create_indicator(
            code='variety_rating',
            name='–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ä—Ç–∞',
            unit='–±–∞–ª–ª (1-9)',
            category='common',
            is_quality=False,
            sort_order=11,
            group_codes=['GRAIN', 'LEGUMES', 'OILSEEDS'],
            description='–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ä—Ç–∞'
        )
        
        # 11. –¢–æ–≤–∞—Ä–Ω–æ—Å—Ç—å (–æ–≤–æ—â–Ω—ã–µ, –±–∞—Ö—á–µ–≤—ã–µ) - –ê–í–¢–û–†–ê–°–ß–ï–¢–ù–ê–Ø
        self.create_indicator(
            code='marketability',
            name='–¢–æ–≤–∞—Ä–Ω–æ—Å—Ç—å',
            unit='%',
            category='common',
            is_quality=False,
            sort_order=12,
            group_codes=['VEGETABLES', 'melons', 'FRUITS', 'BERRY'],
            description='–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –æ—Ç –æ–±—â–µ–≥–æ —É—Ä–æ–∂–∞—è',
            is_auto_calculated=True,
            calculation_formula='(–¢–æ–≤–∞—Ä–Ω–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å / –û–±—â–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å) √ó 100'
        )
        
        # 12. –î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–æ–≤–æ—â–Ω—ã–µ, –±–∞—Ö—á–µ–≤—ã–µ, –ø–ª–æ–¥–æ–≤—ã–µ)
        self.create_indicator(
            code='tasting_score',
            name='–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞',
            unit='–±–∞–ª–ª (1-5)',
            category='common',
            is_quality=False,
            sort_order=13,
            group_codes=['VEGETABLES', 'melons', 'FRUITS', 'BERRY'],
            description='–û—Ä–≥–∞–Ω–æ–ª–µ–ø—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∫—É—Å–æ–≤—ã—Ö –∫–∞—á–µ—Å—Ç–≤'
        )
        
        # –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ö–ê–ß–ï–°–¢–í–ê (–æ–±—â–∏–µ)
        
        # 13. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞/–ø—Ä–æ—Ç–µ–∏–Ω–∞ (–∑–µ—Ä–Ω–æ–≤—ã–µ, –∑–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã–µ, –∫–æ—Ä–º–æ–≤—ã–µ)
        self.create_indicator(
            code='protein_content',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞/–ø—Ä–æ—Ç–µ–∏–Ω–∞',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=100,
            group_codes=['GRAIN', 'LEGUMES', 'FORAGE'],
            description='–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ–ª–∫–∞'
        )
        
        # 14. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ (–∫–æ—Ä–º–æ–≤—ã–µ, –æ–≤–æ—â–Ω—ã–µ)
        self.create_indicator(
            code='dry_matter_content',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=101,
            group_codes=['FORAGE', 'VEGETABLES', 'melons'],
            description='–ü—Ä–æ—Ü–µ–Ω—Ç —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ –≤ –æ–±—â–µ–π –º–∞—Å—Å–µ'
        )
        
        # 15. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –° (–æ–≤–æ—â–Ω—ã–µ, –±–∞—Ö—á–µ–≤—ã–µ)
        self.create_indicator(
            code='vitamin_c_content',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –°',
            unit='–º–≥/%',
            category='quality',
            is_quality=True,
            sort_order=102,
            group_codes=['VEGETABLES', 'melons'],
            description='–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏—Ç–∞–º–∏–Ω–∞ –°'
        )

    # ========== –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò ==========
    
    def load_specific_indicators(self):
        """–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        self.stdout.write(self.style.HTTP_INFO('\nüéØ –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò'))
        
        # === –ó–ï–†–ù–û–ë–û–ë–û–í–´–ï (LEGUMES) ===
        self.stdout.write(self.style.HTTP_INFO('\n  ü´ò –ó–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã–µ'))
        
        self.create_indicator(
            code='shedding_resistance',
            name='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –æ—Å—ã–ø–∞–Ω–∏—é',
            unit='–±–∞–ª–ª (1-9)',
            category='common',
            is_quality=False,
            sort_order=15,
            group_codes=['LEGUMES'],
            description='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –±–æ–±–æ–≤/—Å—Ç—Ä—É—á–∫–æ–≤ –∫ –æ—Å—ã–ø–∞–Ω–∏—é'
        )
        
        # === –ó–ï–†–ù–û–í–´–ï (GRAIN) ===
        self.stdout.write(self.style.HTTP_INFO('\n  üåæ –ó–µ—Ä–Ω–æ–≤—ã–µ'))
        
        self.create_indicator(
            code='grain_nature',
            name='–ù–∞—Ç—É—Ä–∞ –∑–µ—Ä–Ω–∞',
            unit='–≥/–ª',
            category='common',
            is_quality=False,
            sort_order=20,
            group_codes=['GRAIN'],
            description='–û–±—ä—ë–º–Ω–∞—è –º–∞—Å—Å–∞ –∑–µ—Ä–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–µ—Ä–Ω–æ–≤—ã—Ö)'
        )
        
        self.create_indicator(
            code='tillering',
            name='–ö—É—Å—Ç–∏—Å—Ç–æ—Å—Ç—å',
            unit='—à—Ç. –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–±–ª–µ–π',
            category='common',
            is_quality=False,
            sort_order=21,
            group_codes=['GRAIN'],
            description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–±–ª–µ–π –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–∏'
        )
        
        self.create_indicator(
            code='lodging_drooping_brittleness',
            name='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–Ω–∏–∫–∞–Ω–∏—é / –ª–æ–º–∫–æ—Å—Ç–∏ –∫–æ–ª–æ—Å–∞',
            unit='–±–∞–ª–ª (1-9)',
            category='common',
            is_quality=False,
            sort_order=22,
            group_codes=['GRAIN'],
            description='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫–æ–ª–æ—Å–∞ –∫ –ø–æ–Ω–∏–∫–∞–Ω–∏—é –∏ –ª–æ–º–∫–æ—Å—Ç–∏'
        )
        
        self.create_indicator(
            code='germination_resistance',
            name='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏—é –Ω–∞ –∫–æ—Ä–Ω—é',
            unit='–±–∞–ª–ª (1-9)',
            category='common',
            is_quality=False,
            sort_order=23,
            group_codes=['GRAIN'],
            description='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∑–µ—Ä–Ω–∞ –∫ –ø—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–æ —É–±–æ—Ä–∫–∏'
        )
        
        self.create_indicator(
            code='threshability',
            name='–û–±–º–æ–ª–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å',
            unit='–±–∞–ª–ª (1-9)',
            category='common',
            is_quality=False,
            sort_order=24,
            group_codes=['GRAIN'],
            description='–õ–µ–≥–∫–æ—Å—Ç—å –æ–±–º–æ–ª–æ—Ç–∞ –∑–µ—Ä–Ω–∞'
        )
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –∑–µ—Ä–Ω–æ–≤—ã—Ö
        self.create_indicator(
            code='gluten_content',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ–π–∫–æ–≤–∏–Ω—ã',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=110,
            group_codes=['GRAIN'],
            description='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ–π–∫–æ–≤–∏–Ω—ã (–¥–ª—è –ø—à–µ–Ω–∏—Ü—ã)'
        )
        
        self.create_indicator(
            code='vitreousness',
            name='–°—Ç–µ–∫–ª–æ–≤–∏–¥–Ω–æ—Å—Ç—å',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=111,
            group_codes=['GRAIN'],
            description='–°—Ç–µ–∫–ª–æ–≤–∏–¥–Ω–æ—Å—Ç—å –∑–µ—Ä–Ω–∞'
        )
        
        self.create_indicator(
            code='bread_volume',
            name='–û–±—ä—ë–º —Ö–ª–µ–±–∞',
            unit='–º–ª',
            category='quality',
            is_quality=True,
            sort_order=112,
            group_codes=['GRAIN'],
            description='–û–±—ä—ë–º —Ö–ª–µ–±–∞ –∏–∑ –º—É–∫–∏ (—Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'
        )
        
        self.create_indicator(
            code='baking_score',
            name='–û–±—â–∞—è —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞',
            unit='–±–∞–ª–ª (1-5)',
            category='quality',
            is_quality=True,
            sort_order=113,
            group_codes=['GRAIN'],
            description='–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞'
        )
        
        # === –ö–£–ö–£–†–£–ó–ê (—Ç–æ–∂–µ GRAIN, –Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏) ===
        self.stdout.write(self.style.HTTP_INFO('\n  üåΩ –ö—É–∫—É—Ä—É–∑–∞ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)'))
        
        self.create_indicator(
            code='ear_weight',
            name='–ú–∞—Å—Å–∞ –ø–æ—á–∞—Ç–∫–∞',
            unit='–≥',
            category='specific',
            is_quality=False,
            sort_order=30,
            group_codes=['GRAIN'],
            description='–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –æ–¥–Ω–æ–≥–æ –ø–æ—á–∞—Ç–∫–∞ (–∫—É–∫—É—Ä—É–∑–∞)'
        )
        
        self.create_indicator(
            code='grain_output',
            name='–í—ã—Ö–æ–¥ –∑–µ—Ä–Ω–∞',
            unit='%',
            category='specific',
            is_quality=False,
            sort_order=31,
            group_codes=['GRAIN'],
            description='–ü—Ä–æ—Ü–µ–Ω—Ç –∑–µ—Ä–Ω–∞ –æ—Ç –º–∞—Å—Å—ã –ø–æ—á–∞—Ç–∫–∞ (–∫—É–∫—É—Ä—É–∑–∞)',
            is_auto_calculated=True,
            calculation_formula='(–ú–∞—Å—Å–∞ –∑–µ—Ä–Ω–∞ / –ú–∞—Å—Å–∞ –ø–æ—á–∞—Ç–∫–∞) √ó 100'
        )
        
        self.create_indicator(
            code='ear_attachment_height',
            name='–í—ã—Å–æ—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–≥–æ –ø–æ—á–∞—Ç–∫–∞',
            unit='—Å–º',
            category='specific',
            is_quality=False,
            sort_order=32,
            group_codes=['GRAIN'],
            description='–í—ã—Å–æ—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—á–∞—Ç–∫–∞ –æ—Ç –∑–µ–º–ª–∏ (–∫—É–∫—É—Ä—É–∑–∞)'
        )
        
        self.create_indicator(
            code='ears_per_plant',
            name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—á–∞—Ç–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–∏',
            unit='—à—Ç.',
            category='specific',
            is_quality=False,
            sort_order=33,
            group_codes=['GRAIN'],
            description='–ß–∏—Å–ª–æ –ø–æ—á–∞—Ç–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏ (–∫—É–∫—É—Ä—É–∑–∞)'
        )
        
        # === –ö–û–†–ú–û–í–´–ï (FORAGE) ===
        self.stdout.write(self.style.HTTP_INFO('\n  üåø –ö–æ—Ä–º–æ–≤—ã–µ'))
        
        self.create_indicator(
            code='green_mass_yield',
            name='–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –∑–µ–ª–µ–Ω–æ–π –º–∞—Å—Å—ã',
            unit='—Ü/–≥–∞',
            category='common',
            is_quality=False,
            sort_order=40,
            group_codes=['FORAGE'],
            description='–£—Ä–æ–∂–∞–π –∑–µ–ª–µ–Ω–æ–π (—Å–≤–µ–∂–µ–π) –º–∞—Å—Å—ã'
        )
        
        self.create_indicator(
            code='dry_matter_yield',
            name='–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞',
            unit='—Ü/–≥–∞',
            category='common',
            is_quality=False,
            sort_order=41,
            group_codes=['FORAGE'],
            description='–£—Ä–æ–∂–∞–π –≤ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å—É—Ö–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ'
        )
        
        self.create_indicator(
            code='leafiness',
            name='–û–±–ª–∏—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
            unit='%',
            category='common',
            is_quality=False,
            sort_order=42,
            group_codes=['FORAGE'],
            description='–î–æ–ª—è –ª–∏—Å—Ç—å–µ–≤ –≤ –æ–±—â–µ–π –º–∞—Å—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è'
        )
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–æ–≤—ã—Ö
        self.create_indicator(
            code='fiber_content',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=120,
            group_codes=['FORAGE'],
            description='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—ã—Ä–æ–π –∫–ª–µ—Ç—á–∞—Ç–∫–∏'
        )
        
        self.create_indicator(
            code='fat_content',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–∞',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=121,
            group_codes=['FORAGE'],
            description='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—ã—Ä–æ–≥–æ –∂–∏—Ä–∞'
        )
        
        self.create_indicator(
            code='starch_content',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—Ä–∞—Ö–º–∞–ª–∞',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=122,
            group_codes=['FORAGE'],
            description='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—Ä–∞—Ö–º–∞–ª–∞ (–¥–ª—è —Å–∏–ª–æ—Å–Ω—ã—Ö)'
        )
        
        # === –ú–ê–°–õ–ò–ß–ù–´–ï (OILSEEDS) ===
        self.stdout.write(self.style.HTTP_INFO('\n  üåª –ú–∞—Å–ª–∏—á–Ω—ã–µ'))
        
        self.create_indicator(
            code='seeds_per_basket',
            name='–ú–∞—Å—Å–∞ —Å–µ–º—è–Ω –≤ –æ–¥–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–∫–µ/–∫–æ—Ä–æ–±–æ—á–∫–µ/—Å—Ç—Ä—É—á–∫–µ',
            unit='–≥',
            category='specific',
            is_quality=False,
            sort_order=50,
            group_codes=['OILSEEDS'],
            description='–ú–∞—Å—Å–∞ —Å–µ–º—è–Ω –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ—Ü–≤–µ—Ç–∏—è/–ø–ª–æ–¥–∞'
        )
        
        self.create_indicator(
            code='ripening_uniformity',
            name='–í—ã—Ä–∞–≤–Ω–µ–Ω–Ω–æ—Å—Ç—å —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è',
            unit='%',
            category='common',
            is_quality=False,
            sort_order=51,
            group_codes=['OILSEEDS'],
            description='–ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑—Ä–µ–≤—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π'
        )
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –º–∞—Å–ª–∏—á–Ω—ã—Ö
        self.create_indicator(
            code='oil_content',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∞—Å–ª–∞',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=130,
            group_codes=['OILSEEDS'],
            description='–ú–∞—Å–ª–∏—á–Ω–æ—Å—Ç—å —Å–µ–º—è–Ω'
        )
        
        # === –û–í–û–©–ù–´–ï (VEGETABLES) ===
        self.stdout.write(self.style.HTTP_INFO('\n  ü•¨ –û–≤–æ—â–Ω—ã–µ'))
        
        self.create_indicator(
            code='early_yield',
            name='–†–∞–Ω–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å',
            unit='—Ü/–≥–∞',
            category='common',
            is_quality=False,
            sort_order=60,
            group_codes=['VEGETABLES', 'melons'],
            description='–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –æ—Ç –ø–µ—Ä–≤—ã—Ö —Å–±–æ—Ä–æ–≤'
        )
        
        self.create_indicator(
            code='total_marketable_yield',
            name='–¢–æ–≤–∞—Ä–Ω–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å',
            unit='—Ü/–≥–∞',
            category='common',
            is_quality=False,
            sort_order=61,
            group_codes=['VEGETABLES'],
            description='–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏',
            is_auto_calculated=True,
            calculation_formula='–û–±—â–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å √ó (–¢–æ–≤–∞—Ä–Ω–æ—Å—Ç—å / 100)'
        )
        
        self.create_indicator(
            code='fruit_vegetable_weight',
            name='–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –ø–ª–æ–¥–∞/–∫–æ—Ä–Ω–µ–ø–ª–æ–¥–∞/–∫–æ—á–∞–Ω–∞',
            unit='–≥',
            category='common',
            is_quality=False,
            sort_order=62,
            group_codes=['VEGETABLES', 'melons'],
            description='–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –ø–ª–æ–¥–∞/–∫–æ—Ä–Ω–µ–ø–ª–æ–¥–∞'
        )
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è/–∫–æ—Ä–Ω–µ–ø–ª–æ–¥–æ–≤
        self.create_indicator(
            code='starch_content_tubers',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—Ä–∞—Ö–º–∞–ª–∞ (–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å)',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=140,
            group_codes=['VEGETABLES'],
            description='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—Ä–∞—Ö–º–∞–ª–∞ –≤ –∫–ª—É–±–Ω—è—Ö'
        )
        
        self.create_indicator(
            code='storability',
            name='–õ—ë–∂–∫–æ—Å—Ç—å –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=141,
            group_codes=['VEGETABLES', 'FRUITS'],
            description='–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–∏–≤—à–µ–π—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è'
        )
        
        self.create_indicator(
            code='carotenoids_content',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ä–æ—Ç–∏–Ω–æ–∏–¥–æ–≤ (–º–æ—Ä–∫–æ–≤—å)',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=142,
            group_codes=['VEGETABLES'],
            description='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ä–æ—Ç–∏–Ω–æ–∏–¥–æ–≤ (–ø—Ä–æ–≤–∏—Ç–∞–º–∏–Ω –ê)'
        )
        
        self.create_indicator(
            code='sugar_content_beet',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ (—Å–≤—ë–∫–ª–∞)',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=143,
            group_codes=['VEGETABLES'],
            description='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –≤ —Å—Ç–æ–ª–æ–≤–æ–π —Å–≤—ë–∫–ª–µ'
        )
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞–ø—É—Å—Ç—ã/—Å–∞–ª–∞—Ç–∞
        self.create_indicator(
            code='head_density',
            name='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ—á–∞–Ω–∞',
            unit='–±–∞–ª–ª (1-5)',
            category='common',
            is_quality=False,
            sort_order=63,
            group_codes=['VEGETABLES'],
            description='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ—á–∞–Ω–∞ –∫–∞–ø—É—Å—Ç—ã'
        )
        
        self.create_indicator(
            code='bolting_resistance',
            name='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Ü–≤–µ—Ç—É—à–Ω–æ—Å—Ç–∏',
            unit='%',
            category='common',
            is_quality=False,
            sort_order=64,
            group_codes=['VEGETABLES'],
            description='–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å—Ç—Ä–µ–ª–∫–æ–≤–∞–Ω–∏—é'
        )
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–æ–º–∞—Ç–æ–≤
        self.create_indicator(
            code='juice_dry_matter',
            name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ –≤ —Å–æ–∫–µ (—Ç–æ–º–∞—Ç)',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=144,
            group_codes=['VEGETABLES'],
            description='–°—É—Ö–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ –≤ —Å–æ–∫–µ —Ç–æ–º–∞—Ç–∞'
        )
        
        self.create_indicator(
            code='days_to_first_harvest',
            name='–ü–µ—Ä–∏–æ–¥ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–±–æ—Ä–∞',
            unit='–¥–Ω–µ–π',
            category='common',
            is_quality=False,
            sort_order=65,
            group_codes=['VEGETABLES', 'melons'],
            description='–û—Ç –≤—Å—Ö–æ–¥–æ–≤ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è'
        )
        
        # === –ü–õ–û–î–û–í–û-–Ø–ì–û–î–ù–´–ï (FRUITS, BERRY) ===
        self.stdout.write(self.style.HTTP_INFO('\n  üçéüçì –ü–ª–æ–¥–æ–≤–æ-—è–≥–æ–¥–Ω—ã–µ'))
        
        self.create_indicator(
            code='fruit_berry_weight',
            name='–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –ø–ª–æ–¥–∞/—è–≥–æ–¥—ã',
            unit='–≥',
            category='common',
            is_quality=False,
            sort_order=70,
            group_codes=['FRUITS', 'BERRY'],
            description='–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–æ–¥–∞ –∏–ª–∏ —è–≥–æ–¥—ã'
        )
        
        # === –í–ò–ù–û–ì–†–ê–î (FRUITS) ===
        self.stdout.write(self.style.HTTP_INFO('\n  üçá –í–∏–Ω–æ–≥—Ä–∞–¥'))
        
        self.create_indicator(
            code='sugar_content_grapes',
            name='–°–∞—Ö–∞—Ä–∏—Å—Ç–æ—Å—Ç—å (–≤–∏–Ω–æ–≥—Ä–∞–¥)',
            unit='%',
            category='quality',
            is_quality=True,
            sort_order=150,
            group_codes=['FRUITS'],
            description='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –≤ —è–≥–æ–¥–∞—Ö –≤–∏–Ω–æ–≥—Ä–∞–¥–∞'
        )

    # ========== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ==========
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        self.stdout.write('\n' + '='*70)
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING('\nüîç DRY-RUN –ó–ê–í–ï–†–®–ï–ù\n'))
        else:
            self.stdout.write(self.style.SUCCESS('\n‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n'))
            self.stdout.write(f'   üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–æ: {self.created_count}')
            self.stdout.write(f'   üîÑ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.updated_count}')
            self.stdout.write(f'   üîó –ü—Ä–∏–≤—è–∑–æ–∫ –∫ –∫—É–ª—å—Ç—É—Ä–∞–º: {self.cultures_linked}')
        
        if self.missing_groups:
            self.stdout.write(f'\n   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(self.missing_groups)}')
            for code in set(self.missing_groups):
                self.stdout.write(f'      - {code}')
        
        self.stdout.write('='*70 + '\n')

