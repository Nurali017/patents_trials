"""
Management command –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏—Å–ø—ã—Ç–∞–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py load_indicators
    python manage.py load_indicators --strict  # –ü—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫—É–ª—å—Ç—É—Ä—ã
    python manage.py load_indicators --dry-run # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ
    
–û–±–Ω–æ–≤–ª–µ–Ω–æ: 2025-10-13
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –º–µ—Ç–æ–¥–∏–∫–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–π —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä
"""

from django.core.management.base import BaseCommand
from trials_app.models import Indicator, Culture, GroupCulture


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)'

    def __init__(self):
        super().__init__()
        self.missing_cultures = []
        self.missing_groups = []
        self.created_count = 0
        self.updated_count = 0
        self.cultures_linked = 0

    def add_arguments(self, parser):
        parser.add_argument(
            '--strict',
            action='store_true',
            help='–ü—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –∫—É–ª—å—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î',
        )

    def handle(self, *args, **options):
        self.strict = options['strict']
        self.dry_run = options['dry_run']
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING('üîç DRY-RUN —Ä–µ–∂–∏–º - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n'))
        
        self.stdout.write('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏—Å–ø—ã—Ç–∞–Ω–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...\n')
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.load_cereals_indicators()
        self.load_legumes_indicators()
        self.load_corn_grain_indicators()
        self.load_corn_silage_indicators()
        self.load_forage_feed_indicators()
        self.load_forage_seed_indicators()
        self.load_oilseeds_indicators()
        self.load_potato_indicators()
        self.load_root_crops_indicators()
        self.load_vegetables_tomato_indicators()
        self.load_vegetables_cabbage_indicators()
        self.load_melons_indicators()
        self.load_fruit_berry_indicators()
        self.load_grape_indicators()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()

    def create_indicator(self, code, name, unit, category='common', is_quality=False, 
                        sort_order=0, is_universal=False, culture_codes=None, 
                        group_codes=None, description=''):
        """
        –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        
        Args:
            code: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
            name: –ù–∞–∑–≤–∞–Ω–∏–µ
            unit: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            category: common/quality/specific
            is_quality: –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
            sort_order: –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            is_universal: –ü—Ä–∏–º–µ–Ω–∏–º –∫–æ –≤—Å–µ–º –∫—É–ª—å—Ç—É—Ä–∞–º
            culture_codes: –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä
            group_codes: –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –≥—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä
            description: –û–ø–∏—Å–∞–Ω–∏–µ
        """
        if self.dry_run:
            self.stdout.write(f'  [DRY-RUN] {name} ({unit or "–±–µ–∑ –µ–¥."})')
            return None
        
        # –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        indicator, created = Indicator.objects.update_or_create(
            code=code,
            defaults={
                'name': name,
                'unit': unit,
                'category': category,
                'is_quality': is_quality,
                'sort_order': sort_order,
                'is_universal': is_universal,
                'description': description,
                'is_numeric': True,
            }
        )
        
        if created:
            self.created_count += 1
            status = '‚úÖ –°–æ–∑–¥–∞–Ω'
        else:
            self.updated_count += 1
            status = 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω'
        
        self.stdout.write(f'  {status}: {name} ({unit or "–±–∞–ª–ª"})')
        
        # –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∫—É–ª—å—Ç—É—Ä–∞–º
        if not is_universal:
            self._link_cultures(indicator, culture_codes, group_codes)
        
        return indicator

    def _link_cultures(self, indicator, culture_codes=None, group_codes=None):
        """–ü—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫ –∫—É–ª—å—Ç—É—Ä–∞–º"""
        cultures_to_add = []
        
        # –ü–æ –∫–æ–¥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä
        if culture_codes:
            for code in culture_codes:
                try:
                    culture = Culture.objects.get(code=code, is_deleted=False)
                    cultures_to_add.append(culture)
                except Culture.DoesNotExist:
                    self._handle_missing_culture(code)
        
        # –ü–æ –∫–æ–¥–∞–º –≥—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä
        if group_codes:
            for group_code in group_codes:
                try:
                    group = GroupCulture.objects.get(code=group_code, is_deleted=False)
                    group_cultures = Culture.objects.filter(
                        group_culture=group,
                        is_deleted=False
                    )
                    cultures_to_add.extend(list(group_cultures))
                    
                    if not group_cultures.exists():
                        self.stdout.write(
                            self.style.WARNING(
                                f'    ‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ "{group.name}" –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –∫—É–ª—å—Ç—É—Ä –≤ –Ω–µ–π –Ω–µ—Ç'
                            )
                        )
                except GroupCulture.DoesNotExist:
                    self._handle_missing_group(group_code)
        
        # –î–æ–±–∞–≤–∏—Ç—å –∫—É–ª—å—Ç—É—Ä—ã –∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é
        if cultures_to_add:
            indicator.cultures.add(*cultures_to_add)
            self.cultures_linked += len(cultures_to_add)
            self.stdout.write(
                self.style.SUCCESS(f'    ‚úì –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫—É–ª—å—Ç—É—Ä: {len(cultures_to_add)}')
            )

    def _handle_missing_culture(self, code):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â—É—é –∫—É–ª—å—Ç—É—Ä—É"""
        self.missing_cultures.append(code)
        msg = f'    ‚ö†Ô∏è  –ö—É–ª—å—Ç—É—Ä–∞ —Å –∫–æ–¥–æ–º "{code}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î'
        
        if self.strict:
            self.stdout.write(self.style.ERROR(msg))
            raise Exception(f'–ö—É–ª—å—Ç—É—Ä–∞ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (strict mode)')
        else:
            self.stdout.write(self.style.WARNING(msg))

    def _handle_missing_group(self, code):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É"""
        self.missing_groups.append(code)
        msg = f'    ‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ –∫—É–ª—å—Ç—É—Ä —Å –∫–æ–¥–æ–º "{code}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î'
        
        if self.strict:
            self.stdout.write(self.style.ERROR(msg))
            raise Exception(f'–ì—Ä—É–ø–ø–∞ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (strict mode)')
        else:
            self.stdout.write(self.style.WARNING(msg))

    # ========== –ó–ï–†–ù–û–í–´–ï –ò –ö–†–£–ü–Ø–ù–´–ï ==========
    
    def load_cereals_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∑–µ—Ä–Ω–æ–≤—ã—Ö –∏ –∫—Ä—É–ø—è–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä"""
        self.stdout.write(self.style.HTTP_INFO('\nüåæ –ó–µ—Ä–Ω–æ–≤—ã–µ –∏ –∫—Ä—É–ø—è–Ω—ã–µ'))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        common_indicators = [
            ('cereals_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 1),
            ('cereals_deviation_standard', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (—Ü/–≥–∞)', '—Ü/–≥–∞', 'common', False, 2),
            ('cereals_deviation_standard_pct', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (%)', '%', 'common', False, 3),
            ('cereals_1000_grain_weight', '–ú–∞—Å—Å–∞ 1000 –∑–µ—Ä–µ–Ω', '–≥', 'common', False, 4),
            ('cereals_lodging_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é / –ø–æ–Ω–∏–∫–∞–Ω–∏—é / –ª–æ–º–∫–æ—Å—Ç–∏', '–±–∞–ª–ª (1-9)', 'common', False, 5),
            ('cereals_drought_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∑–∞—Å—É—Ö–µ', '–±–∞–ª–ª (1-9)', 'common', False, 6),
            ('cereals_disease_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–æ–ª–µ–∑–Ω—è–º –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º', '–±–∞–ª–ª (1-9)', 'common', False, 7),
            ('cereals_germination_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏—é –Ω–∞ –∫–æ—Ä–Ω—é', '–±–∞–ª–ª (1-9)', 'common', False, 8),
            ('cereals_winter_hardiness', '–ó–∏–º–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å', '–±–∞–ª–ª (1-9)', 'common', False, 9),
            ('cereals_vegetation_period', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', '–¥–Ω–µ–π', 'common', False, 10),
            ('cereals_plant_height', '–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '—Å–º', 'common', False, 11),
            ('cereals_tillering', '–ö—É—Å—Ç–∏—Å—Ç–æ—Å—Ç—å', '—à—Ç. –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–±–ª–µ–π', 'common', False, 12),
            ('cereals_grain_nature', '–ù–∞—Ç—É—Ä–∞ –∑–µ—Ä–Ω–∞', '–≥/–ª', 'common', False, 13),
            ('cereals_threshability', '–û–±–º–æ–ª–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', '–±–∞–ª–ª (1-9)', 'common', False, 14),
            ('cereals_variety_rating', '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ä—Ç–∞', '–±–∞–ª–ª (1-9)', 'common', False, 15),
        ]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_indicators = [
            ('cereals_protein', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞', '%', 'quality', True, 100),
            ('cereals_gluten', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ–π–∫–æ–≤–∏–Ω—ã', '%', 'quality', True, 101),
            ('cereals_vitreousness', '–°—Ç–µ–∫–ª–æ–≤–∏–¥–Ω–æ—Å—Ç—å', '%', 'quality', True, 102),
            ('cereals_bread_volume', '–û–±—ä—ë–º —Ö–ª–µ–±–∞', '–º–ª', 'quality', True, 103),
            ('cereals_baking_score', '–û–±—â–∞—è —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞', '–±–∞–ª–ª (1-5)', 'quality', True, 104),
        ]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        for code, name, unit, category, is_quality, sort_order in common_indicators + quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['GRAIN'],  # –ö–æ–¥ –≥—Ä—É–ø–ø—ã –∑–µ—Ä–Ω–æ–≤—ã—Ö (–∏–∑ Patents Service)
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∑–µ—Ä–Ω–æ–≤—ã—Ö –∏ –∫—Ä—É–ø—è–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä'
            )

    # ========== –ó–ï–†–ù–û–ë–û–ë–û–í–´–ï ==========
    
    def load_legumes_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∑–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã—Ö"""
        self.stdout.write(self.style.HTTP_INFO('\nü´ò –ó–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã–µ'))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        common_indicators = [
            ('legumes_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 20),
            ('legumes_deviation_standard', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (—Ü/–≥–∞)', '—Ü/–≥–∞', 'common', False, 21),
            ('legumes_deviation_standard_pct', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (%)', '%', 'common', False, 22),
            ('legumes_1000_grain_weight', '–ú–∞—Å—Å–∞ 1000 –∑—ë—Ä–µ–Ω', '–≥', 'common', False, 23),
            ('legumes_plant_height', '–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π / —Å—Ç–µ–±–ª–µ—Å—Ç–æ—è', '—Å–º', 'common', False, 24),
            ('legumes_lodging_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é / –æ—Å—ã–ø–∞–Ω–∏—é', '–±–∞–ª–ª (1-9)', 'common', False, 25),
            ('legumes_drought_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∑–∞—Å—É—Ö–µ', '–±–∞–ª–ª (1-9)', 'common', False, 26),
            ('legumes_disease_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–æ–ª–µ–∑–Ω—è–º –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º', '–±–∞–ª–ª (1-9)', 'common', False, 27),
            ('legumes_winter_hardiness', '–ó–∏–º–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å', '–±–∞–ª–ª (1-9)', 'common', False, 28),
            ('legumes_vegetation_period', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', '–¥–Ω–µ–π', 'common', False, 29),
            ('legumes_variety_rating', '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ä—Ç–∞', '–±–∞–ª–ª (1-9)', 'common', False, 30),
        ]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_indicators = [
            ('legumes_protein', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞', '%', 'quality', True, 120),
        ]
        
        for code, name, unit, category, is_quality, sort_order in common_indicators + quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['LEGUMES'],  # –ö–æ–¥ –≥—Ä—É–ø–ø—ã –∏–∑ Patents Service
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∑–µ—Ä–Ω–æ–±–æ–±–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä'
            )

    # ========== –ö–£–ö–£–†–£–ó–ê –ù–ê –ó–ï–†–ù–û ==========
    
    def load_corn_grain_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫—É–∫—É—Ä—É–∑—ã –Ω–∞ –∑–µ—Ä–Ω–æ"""
        self.stdout.write(self.style.HTTP_INFO('\nüåΩ –ö—É–∫—É—Ä—É–∑–∞ (–Ω–∞ –∑–µ—Ä–Ω–æ)'))
        
        indicators = [
            ('corn_grain_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 40),
            ('corn_grain_deviation_standard', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (—Ü/–≥–∞)', '—Ü/–≥–∞', 'common', False, 41),
            ('corn_grain_deviation_standard_pct', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (%)', '%', 'common', False, 42),
            ('corn_grain_1000_grain_weight', '–ú–∞—Å—Å–∞ 1000 –∑–µ—Ä–µ–Ω', '–≥', 'common', False, 43),
            ('corn_grain_ear_weight', '–ú–∞—Å—Å–∞ –ø–æ—á–∞—Ç–∫–∞', '–≥', 'common', False, 44),
            ('corn_grain_output', '–í—ã—Ö–æ–¥ –∑–µ—Ä–Ω–∞', '%', 'common', False, 45),
            ('corn_grain_plant_height', '–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '—Å–º', 'common', False, 46),
            ('corn_grain_lower_ear_height', '–í—ã—Å–æ—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–≥–æ –ø–æ—á–∞—Ç–∫–∞', '—Å–º', 'common', False, 47),
            ('corn_grain_ears_per_plant', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—á–∞—Ç–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–∏', '—à—Ç.', 'common', False, 48),
            ('corn_grain_lodging_drought_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é –∏ –∑–∞—Å—É—Ö–µ', '–±–∞–ª–ª (1-9)', 'common', False, 49),
            ('corn_grain_disease_pest_damage', '–ü–æ—Ä–∞–∂–∞–µ–º–æ—Å—Ç—å –±–æ–ª–µ–∑–Ω—è–º–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏', '%', 'common', False, 50),
            ('corn_grain_days_to_maturity', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–æ –≤–æ—Å–∫–æ–≤–æ–π —Å–ø–µ–ª–æ—Å—Ç–∏)', '–¥–Ω–µ–π', 'common', False, 51),
        ]
        
        for code, name, unit, category, is_quality, sort_order in indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['GRAIN'],  # –ö—É–∫—É—Ä—É–∑–∞ —Ç–æ–∂–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–µ—Ä–Ω–æ–≤—ã–º
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∫—É–∫—É—Ä—É–∑—ã –Ω–∞ –∑–µ—Ä–Ω–æ'
            )

    # ========== –ö–£–ö–£–†–£–ó–ê –ù–ê –°–ò–õ–û–° ==========
    
    def load_corn_silage_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫—É–∫—É—Ä—É–∑—ã –Ω–∞ —Å–∏–ª–æ—Å"""
        self.stdout.write(self.style.HTTP_INFO('\nüåΩ –ö—É–∫—É—Ä—É–∑–∞ (–Ω–∞ —Å–∏–ª–æ—Å)'))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        common_indicators = [
            ('corn_silage_green_mass_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –∑–µ–ª–µ–Ω–æ–π –º–∞—Å—Å—ã', '—Ü/–≥–∞', 'common', False, 60),
            ('corn_silage_dry_matter_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ)', '—Ü/–≥–∞', 'common', False, 61),
            ('corn_silage_leafiness', '–û–±–ª–∏—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '%', 'common', False, 62),
            ('corn_silage_plant_height', '–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '—Å–º', 'common', False, 63),
            ('corn_silage_lodging_drought_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é –∏ –∑–∞—Å—É—Ö–µ', '–±–∞–ª–ª (1-9)', 'common', False, 64),
            ('corn_silage_vegetation_period', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', '–¥–Ω–µ–π', 'common', False, 65),
        ]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_indicators = [
            ('corn_silage_dry_matter_content', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞', '%', 'quality', True, 140),
            ('corn_silage_protein', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞', '%', 'quality', True, 141),
            ('corn_silage_fat', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–∞', '%', 'quality', True, 142),
            ('corn_silage_starch', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—Ä–∞—Ö–º–∞–ª–∞', '%', 'quality', True, 143),
        ]
        
        for code, name, unit, category, is_quality, sort_order in common_indicators + quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['FORAGE'],  # –ö—É–∫—É—Ä—É–∑–∞ –Ω–∞ —Å–∏–ª–æ—Å = –∫–æ—Ä–º–æ–≤–∞—è
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∫—É–∫—É—Ä—É–∑—ã –Ω–∞ —Å–∏–ª–æ—Å'
            )

    # ========== –ö–û–†–ú–û–í–´–ï –ö–£–õ–¨–¢–£–†–´ (–ù–ê –ö–û–†–ú) ==========
    
    def load_forage_feed_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫–æ—Ä–º–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä –Ω–∞ –∑–µ–ª–µ–Ω—ã–π –∫–æ—Ä–º / —Å–µ–Ω–æ"""
        self.stdout.write(self.style.HTTP_INFO('\nüåø –ö–æ—Ä–º–æ–≤—ã–µ –∫—É–ª—å—Ç—É—Ä—ã (–Ω–∞ –∑–µ–ª–µ–Ω—ã–π –∫–æ—Ä–º / —Å–µ–Ω–æ)'))
        
        indicators = [
            ('forage_feed_green_mass_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –∑–µ–ª–µ–Ω–æ–π –º–∞—Å—Å—ã', '—Ü/–≥–∞', 'common', False, 80),
            ('forage_feed_dry_matter_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞', '—Ü/–≥–∞', 'common', False, 81),
            ('forage_feed_leafiness', '–û–±–ª–∏—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '%', 'common', False, 82),
            ('forage_feed_plant_height', '–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '—Å–º', 'common', False, 83),
            ('forage_feed_lodging_drought_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é –∏ –∑–∞—Å—É—Ö–µ', '–±–∞–ª–ª (1-9)', 'common', False, 84),
            ('forage_feed_vegetation_period', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', '–¥–Ω–µ–π', 'common', False, 85),
        ]
        
        for code, name, unit, category, is_quality, sort_order in indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['FORAGE'],
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∫–æ—Ä–º–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä (–∑–µ–ª–µ–Ω—ã–π –∫–æ—Ä–º / —Å–µ–Ω–æ)'
            )

    # ========== –ö–û–†–ú–û–í–´–ï –ö–£–õ–¨–¢–£–†–´ (–ù–ê –°–ï–ú–ï–ù–ê) ==========
    
    def load_forage_seed_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫–æ—Ä–º–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä –Ω–∞ —Å–µ–º–µ–Ω–∞"""
        self.stdout.write(self.style.HTTP_INFO('\nüåø –ö–æ—Ä–º–æ–≤—ã–µ –∫—É–ª—å—Ç—É—Ä—ã (–Ω–∞ —Å–µ–º–µ–Ω–∞)'))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        common_indicators = [
            ('forage_seed_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —Å–µ–º—è–Ω', '—Ü/–≥–∞', 'common', False, 100),
            ('forage_seed_1000_grain_weight', '–ú–∞—Å—Å–∞ 1000 –∑—ë—Ä–µ–Ω', '–≥', 'common', False, 101),
            ('forage_seed_plant_height', '–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '—Å–º', 'common', False, 102),
            ('forage_seed_lodging_shedding_drought_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é / –æ—Å—ã–ø–∞–Ω–∏—é / –∑–∞—Å—É—Ö–µ', '–±–∞–ª–ª (1-9)', 'common', False, 103),
            ('forage_seed_winter_hardiness', '–ó–∏–º–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å', '–±–∞–ª–ª (1-9)', 'common', False, 104),
            ('forage_seed_vegetation_period', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', '–¥–Ω–µ–π', 'common', False, 105),
        ]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_indicators = [
            ('forage_seed_protein', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ—Ç–µ–∏–Ω–∞', '%', 'quality', True, 160),
            ('forage_seed_fiber', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏', '%', 'quality', True, 161),
            ('forage_seed_dry_matter', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞', '%', 'quality', True, 162),
        ]
        
        for code, name, unit, category, is_quality, sort_order in common_indicators + quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['FORAGE'],
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∫–æ—Ä–º–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä (—Å–µ–º–µ–Ω–∞)'
            )

    # ========== –ú–ê–°–õ–ò–ß–ù–´–ï ==========
    
    def load_oilseeds_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –º–∞—Å–ª–∏—á–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä (–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫, —Ä–∞–ø—Å, —Å–æ—è –∏ –¥—Ä.)"""
        self.stdout.write(self.style.HTTP_INFO('\nüåª –ú–∞—Å–ª–∏—á–Ω—ã–µ'))
        
        indicators = [
            ('oilseeds_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 120),
            ('oilseeds_deviation_standard', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (—Ü/–≥–∞)', '—Ü/–≥–∞', 'common', False, 121),
            ('oilseeds_deviation_standard_pct', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (%)', '%', 'common', False, 122),
            ('oilseeds_1000_seed_weight', '–ú–∞—Å—Å–∞ 1000 —Å–µ–º—è–Ω', '–≥', 'common', False, 123),
            ('oilseeds_vegetation_period', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', '–¥–Ω–µ–π', 'common', False, 124),
            ('oilseeds_plant_height', '–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π', '—Å–º', 'common', False, 125),
            ('oilseeds_lodging_drought_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–ª–µ–≥–∞–Ω–∏—é –∏ –∑–∞—Å—É—Ö–µ', '–±–∞–ª–ª (1-9)', 'common', False, 126),
            ('oilseeds_disease_pest_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–æ–ª–µ–∑–Ω—è–º –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º', '–±–∞–ª–ª (1-9)', 'common', False, 127),
            ('oilseeds_basket_seed_weight', '–ú–∞—Å—Å–∞ —Å–µ–º—è–Ω –≤ –æ–¥–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–∫–µ/–∫–æ—Ä–æ–±–æ—á–∫–µ/—Å—Ç—Ä—É—á–∫–µ', '–≥', 'common', False, 128),
            ('oilseeds_ripening_uniformity', '–í—ã—Ä–∞–≤–Ω–µ–Ω–Ω–æ—Å—Ç—å —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è', '%', 'common', False, 129),
            ('oilseeds_variety_rating', '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ä—Ç–∞', '–±–∞–ª–ª (1-9)', 'common', False, 130),
        ]
        
        for code, name, unit, category, is_quality, sort_order in indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['OILSEEDS'],
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –º–∞—Å–ª–∏—á–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä'
            )

    # ========== –ö–ê–†–¢–û–§–ï–õ–¨ ==========
    
    def load_potato_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è"""
        self.stdout.write(self.style.HTTP_INFO('\nü•î –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å'))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        common_indicators = [
            ('potato_total_yield', '–û–±—â–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 140),
            ('potato_marketable_yield', '–¢–æ–≤–∞—Ä–Ω–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 141),
            ('potato_marketability', '–¢–æ–≤–∞—Ä–Ω–æ—Å—Ç—å', '%', 'common', False, 142),
            ('potato_tuber_weight', '–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –æ–¥–Ω–æ–≥–æ –∫–ª—É–±–Ω—è', '–≥', 'common', False, 143),
            ('potato_disease_pest_damage', '–ü–æ—Ä–∞–∂–∞–µ–º–æ—Å—Ç—å –±–æ–ª–µ–∑–Ω—è–º–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏', '%', 'common', False, 144),
        ]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_indicators = [
            ('potato_starch', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—Ä–∞—Ö–º–∞–ª–∞', '%', 'quality', True, 180),
            ('potato_storability', '–õ—ë–∂–∫–æ—Å—Ç—å –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏', '%', 'quality', True, 181),
            ('potato_vitamin_c', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –°', '–º–≥/%', 'quality', True, 182),
        ]
        
        for code, name, unit, category, is_quality, sort_order in common_indicators + quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['VEGETABLES'],  # –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å = –æ–≤–æ—â–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è'
            )

    # ========== –ö–û–†–ù–ï–ü–õ–û–î–´ ==========
    
    def load_root_crops_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫–æ—Ä–Ω–µ–ø–ª–æ–¥–æ–≤ (–º–æ—Ä–∫–æ–≤—å, —Å–≤—ë–∫–ª–∞ –∏ –¥—Ä.)"""
        self.stdout.write(self.style.HTTP_INFO('\nü•ï –ö–æ—Ä–Ω–µ–ø–ª–æ–¥—ã'))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        common_indicators = [
            ('root_crops_total_yield', '–û–±—â–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 150),
            ('root_crops_marketable_yield', '–¢–æ–≤–∞—Ä–Ω–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 151),
            ('root_crops_marketability', '–¢–æ–≤–∞—Ä–Ω–æ—Å—Ç—å', '%', 'common', False, 152),
            ('root_crops_root_weight', '–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–Ω–µ–ø–ª–æ–¥–∞', '–≥', 'common', False, 153),
            ('root_crops_vegetation_period', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', '–¥–Ω–µ–π', 'common', False, 154),
            ('root_crops_tasting_score', '–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞', '–±–∞–ª–ª (1-5)', 'common', False, 155),
        ]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_indicators = [
            ('root_crops_storability', '–õ—ë–∂–∫–æ—Å—Ç—å –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏', '%', 'quality', True, 190),
            ('root_crops_carotenoids', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ä–æ—Ç–∏–Ω–æ–∏–¥–æ–≤ (–¥–ª—è –º–æ—Ä–∫–æ–≤–∏)', '%', 'quality', True, 191),
            ('root_crops_sugar', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ (–¥–ª—è —Å–≤—ë–∫–ª—ã)', '%', 'quality', True, 192),
            ('root_crops_dry_matter', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞', '%', 'quality', True, 193),
        ]
        
        for code, name, unit, category, is_quality, sort_order in common_indicators + quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['VEGETABLES'],  # –ö–æ—Ä–Ω–µ–ø–ª–æ–¥—ã = –æ–≤–æ—â–∏
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∫–æ—Ä–Ω–µ–ø–ª–æ–¥–æ–≤'
            )
    
    # ========== –û–í–û–©–ù–´–ï (–¢–û–ú–ê–¢, –ü–ï–†–ï–¶, –ë–ê–ö–õ–ê–ñ–ê–ù) ==========
    
    def load_vegetables_tomato_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–æ–º–∞—Ç–∞, –ø–µ—Ä—Ü–∞, –±–∞–∫–ª–∞–∂–∞–Ω–∞"""
        self.stdout.write(self.style.HTTP_INFO('\nüçÖ –¢–æ–º–∞—Ç, –ø–µ—Ä–µ—Ü, –±–∞–∫–ª–∞–∂–∞–Ω'))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        common_indicators = [
            ('tomato_early_yield', '–†–∞–Ω–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 160),
            ('tomato_total_yield', '–û–±—â–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 161),
            ('tomato_marketability', '–¢–æ–≤–∞—Ä–Ω–æ—Å—Ç—å', '%', 'common', False, 162),
            ('tomato_fruit_weight', '–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–æ–¥–∞', '–≥', 'common', False, 163),
            ('tomato_days_to_first_harvest', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ 1-–≥–æ —Å–±–æ—Ä–∞', '–¥–Ω–µ–π', 'common', False, 164),
            ('tomato_tasting_score', '–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞', '–±–∞–ª–ª (1-5)', 'common', False, 165),
        ]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_indicators = [
            ('tomato_dry_matter', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞', '%', 'quality', True, 200),
            ('tomato_vitamin_c', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –°', '–º–≥/%', 'quality', True, 201),
            ('tomato_juice_dry_matter', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ –≤ —Å–æ–∫–µ (–¥–ª—è —Ç–æ–º–∞—Ç–∞)', '%', 'quality', True, 202),
        ]
        
        for code, name, unit, category, is_quality, sort_order in common_indicators + quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['VEGETABLES'],
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è —Ç–æ–º–∞—Ç–∞, –ø–µ—Ä—Ü–∞, –±–∞–∫–ª–∞–∂–∞–Ω–∞'
            )
    
    # ========== –û–í–û–©–ù–´–ï (–ö–ê–ü–£–°–¢–ê, –°–ê–õ–ê–¢) ==========
    
    def load_vegetables_cabbage_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫–∞–ø—É—Å—Ç—ã –∏ —Å–∞–ª–∞—Ç–∞"""
        self.stdout.write(self.style.HTTP_INFO('\nü•¨ –ö–∞–ø—É—Å—Ç–∞, —Å–∞–ª–∞—Ç'))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        common_indicators = [
            ('cabbage_early_yield', '–†–∞–Ω–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 170),
            ('cabbage_total_yield', '–û–±—â–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 171),
            ('cabbage_head_weight', '–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –∫–æ—á–∞–Ω–∞ / —Ä–∞—Å—Ç–µ–Ω–∏—è', '–≥', 'common', False, 172),
            ('cabbage_marketability', '–¢–æ–≤–∞—Ä–Ω–æ—Å—Ç—å', '%', 'common', False, 173),
            ('cabbage_density', '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ—á–∞–Ω–∞', '–±–∞–ª–ª (1-5)', 'common', False, 174),
            ('cabbage_bolting_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Ü–≤–µ—Ç—É—à–Ω–æ—Å—Ç–∏', '%', 'common', False, 175),
            ('cabbage_vegetation_period', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', '–¥–Ω–µ–π', 'common', False, 176),
        ]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_indicators = [
            ('cabbage_dry_matter', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞', '%', 'quality', True, 210),
            ('cabbage_vitamin_c', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –°', '–º–≥/%', 'quality', True, 211),
        ]
        
        for code, name, unit, category, is_quality, sort_order in common_indicators + quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['VEGETABLES'],
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∫–∞–ø—É—Å—Ç—ã –∏ —Å–∞–ª–∞—Ç–∞'
            )
    
    # ========== –ë–ê–•–ß–ï–í–´–ï (–ê–†–ë–£–ó, –î–´–ù–Ø) ==========
    
    def load_melons_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –±–∞—Ö—á–µ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä (–∞—Ä–±—É–∑, –¥—ã–Ω—è)"""
        self.stdout.write(self.style.HTTP_INFO('\nüçâ –ë–∞—Ö—á–µ–≤—ã–µ (–∞—Ä–±—É–∑, –¥—ã–Ω—è)'))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        common_indicators = [
            ('melons_early_yield', '–†–∞–Ω–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 180),
            ('melons_total_yield', '–û–±—â–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞', 'common', False, 181),
            ('melons_fruit_weight', '–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–æ–¥–∞', '–∫–≥', 'common', False, 182),
            ('melons_marketability', '–¢–æ–≤–∞—Ä–Ω–æ—Å—Ç—å', '%', 'common', False, 183),
            ('melons_days_to_first_harvest', '–í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ 1-–≥–æ —Å–±–æ—Ä–∞', '–¥–Ω–µ–π', 'common', False, 184),
            ('melons_tasting_score', '–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞', '–±–∞–ª–ª (1-5)', 'common', False, 185),
        ]
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_indicators = [
            ('melons_dry_matter', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ / —Å–∞—Ö–∞—Ä–æ–≤', '%', 'quality', True, 220),
            ('melons_vitamin_c', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –°', '–º–≥/%', 'quality', True, 221),
        ]
        
        for code, name, unit, category, is_quality, sort_order in common_indicators + quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['melons'],  # –ë–∞—Ö—á–µ–≤—ã–µ –∫—É–ª—å—Ç—É—Ä—ã
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –±–∞—Ö—á–µ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä'
            )

    # ========== –ü–õ–û–î–û–í–û-–Ø–ì–û–î–ù–´–ï –ò –í–ò–ù–û–ì–†–ê–î ==========
    
    def load_fruit_berry_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –ø–ª–æ–¥–æ–≤–æ-—è–≥–æ–¥–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä –∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞"""
        self.stdout.write(self.style.HTTP_INFO('\nüçéüçì –ü–ª–æ–¥–æ–≤–æ-—è–≥–æ–¥–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã'))
        
        indicators = [
            ('fruit_yield', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', '—Ü/–≥–∞, –∫–≥/–∫—É—Å—Ç', 'common', False, 250),
            ('fruit_marketability', '–¢–æ–≤–∞—Ä–Ω–æ—Å—Ç—å', '%', 'common', False, 251),
            ('fruit_avg_weight', '–°—Ä–µ–¥–Ω—è—è –º–∞—Å—Å–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–æ–¥–∞/–≥—Ä–æ–∑–¥–∏', '–≥', 'common', False, 252),
            ('fruit_tasting_score', '–î–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞', '–±–∞–ª–ª (1-5)', 'common', False, 253),
            ('fruit_disease_pest_resistance', '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–æ–ª–µ–∑–Ω—è–º –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º', '–±–∞–ª–ª (1-9)', 'common', False, 254),
            ('fruit_storability', '–õ—ë–∂–∫–æ—Å—Ç—å (–¥–ª—è –≤–∏–Ω–æ–≥—Ä–∞–¥–∞, —è–±–ª–æ–∫)', '–¥–Ω–µ–π, %', 'common', False, 255),
        ]
        
        for code, name, unit, category, is_quality, sort_order in indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['FRUITS', 'BERRY'],  # –ü–ª–æ–¥–æ–≤—ã–µ –∏ —è–≥–æ–¥–Ω—ã–µ –∏–∑ Patents
                description='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –ø–ª–æ–¥–æ–≤—ã—Ö –∏ —è–≥–æ–¥–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä'
            )
    
    # ========== –í–ò–ù–û–ì–†–ê–î ==========
    
    def load_grape_indicators(self):
        """–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –≤–∏–Ω–æ–≥—Ä–∞–¥–∞"""
        self.stdout.write(self.style.HTTP_INFO('\nüçá –í–∏–Ω–æ–≥—Ä–∞–¥'))
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≤–∏–Ω–æ–≥—Ä–∞–¥–∞)
        quality_indicators = [
            ('grape_sugar_content', '–°–∞—Ö–∞—Ä–∏—Å—Ç–æ—Å—Ç—å (–¥–ª—è –≤–∏–Ω–æ–≥—Ä–∞–¥–∞)', '%', 'quality', True, 260),
        ]
        
        for code, name, unit, category, is_quality, sort_order in quality_indicators:
            self.create_indicator(
                code=code,
                name=name,
                unit=unit,
                category=category,
                is_quality=is_quality,
                sort_order=sort_order,
                group_codes=['FRUITS'],  # –í–∏–Ω–æ–≥—Ä–∞–¥ –≤—Ö–æ–¥–∏—Ç –≤ –ø–ª–æ–¥–æ–≤—ã–µ
                description='–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –≤–∏–Ω–æ–≥—Ä–∞–¥–∞'
            )

    # ========== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ==========
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        self.stdout.write('\n' + '='*70)
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING('\nüîç DRY-RUN –ó–ê–í–ï–†–®–ï–ù - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n'))
        else:
            self.stdout.write(self.style.SUCCESS('\n‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n'))
            self.stdout.write(f'   üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–æ: {self.created_count}')
            self.stdout.write(f'   üîÑ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.updated_count}')
            self.stdout.write(f'   üîó –ü—Ä–∏–≤—è–∑–æ–∫ –∫ –∫—É–ª—å—Ç—É—Ä–∞–º: {self.cultures_linked}')
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if self.missing_cultures:
            self.stdout.write(f'\n   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫—É–ª—å—Ç—É—Ä: {len(self.missing_cultures)}')
            self.stdout.write('      –ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—É–ª—å—Ç—É—Ä:')
            for code in set(self.missing_cultures):
                self.stdout.write(f'      - {code}')
        
        if self.missing_groups:
            self.stdout.write(f'\n   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(self.missing_groups)}')
            self.stdout.write('      –ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø:')
            for code in set(self.missing_groups):
                self.stdout.write(f'      - {code}')
        
        if self.missing_cultures or self.missing_groups:
            self.stdout.write(
                self.style.WARNING(
                    '\n   üí° –°–æ–≤–µ—Ç: –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã –∏ –≥—Ä—É–ø–ø—ã –∫—É–ª—å—Ç—É—Ä,'
                )
            )
            self.stdout.write(
                self.style.WARNING(
                    '      –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.'
                )
            )
        
        self.stdout.write('='*70 + '\n')




