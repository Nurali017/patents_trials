"""
Management command –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ì–°–£

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py update_region_addresses
    python manage.py update_region_addresses --set-empty  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ –∞–¥—Ä–µ—Å–∞
    python manage.py update_region_addresses --show-only  # –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞
"""

from django.core.management.base import BaseCommand
from trials_app.models import Region


class Command(BaseCommand):
    help = '–û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –ì–°–£ (—Å–æ—Ä—Ç–æ—É—á–∞—Å—Ç–∫–æ–≤)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--set-empty',
            action='store_true',
            help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤',
        )
        parser.add_argument(
            '--show-only',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞, –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å',
        )

    def handle(self, *args, **options):
        if options['show_only']:
            self.show_addresses()
        elif options['set_empty']:
            self.set_empty_addresses()
        else:
            self.show_addresses()
            self.stdout.write('\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—É—Å—Ç—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --set-empty')

    def show_addresses(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞"""
        self.stdout.write('üìã –¢–ï–ö–£–©–ò–ï –ê–î–†–ï–°–ê –ì–°–£\n')
        
        regions = Region.objects.filter(is_deleted=False).order_by('oblast__name', 'name')
        
        current_oblast = None
        for region in regions:
            if region.oblast.name != current_oblast:
                current_oblast = region.oblast.name
                self.stdout.write(f'\nüìç {current_oblast}:')
            
            address = region.address if region.address else '(–∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω)'
            self.stdout.write(f'   {region.name}: {address}')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_regions = regions.count()
        regions_with_address = regions.exclude(address__isnull=True).exclude(address='').count()
        regions_without_address = total_regions - regions_with_address
        
        self.stdout.write(f'\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write(f'   –í—Å–µ–≥–æ –ì–°–£: {total_regions}')
        self.stdout.write(f'   –° –∞–¥—Ä–µ—Å–æ–º: {regions_with_address}')
        self.stdout.write(f'   –ë–µ–∑ –∞–¥—Ä–µ—Å–∞: {regions_without_address}')

    def set_empty_addresses(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        self.stdout.write('üßπ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Å—Ç—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ì–°–£...\n')
        
        regions = Region.objects.filter(is_deleted=False)
        updated_count = 0
        
        for region in regions:
            if region.address:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–¥—Ä–µ—Å
                region.address = ''
                region.save()
                updated_count += 1
                self.stdout.write(f'   ‚úÖ –û—á–∏—â–µ–Ω –∞–¥—Ä–µ—Å: {region.name}')
        
        self.stdout.write(f'\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ä–µ–≥–∏–æ–Ω–æ–≤')
        
        if updated_count == 0:
            self.stdout.write('   ‚ÑπÔ∏è  –í—Å–µ –∞–¥—Ä–µ—Å–∞ —É–∂–µ –±—ã–ª–∏ –ø—É—Å—Ç—ã–º–∏')

