"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä –∏–∑ Patents Service

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py sync_group_cultures
    python manage.py sync_group_cultures --dry-run
"""

from django.core.management.base import BaseCommand
from trials_app.models import GroupCulture
from trials_app.patents_integration import patents_api


class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –∫—É–ª—å—Ç—É—Ä –∏–∑ Patents Service'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        
        if dry_run:
            self.stdout.write(self.style.WARNING('üîç DRY-RUN —Ä–µ–∂–∏–º\n'))
        
        self.stdout.write('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø –∫—É–ª—å—Ç—É—Ä –∏–∑ Patents Service...\n')
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ Patents
        groups = patents_api.get_all_group_cultures()
        
        if not groups:
            self.stdout.write(self.style.ERROR('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Patents Service'))
            return
        
        self.stdout.write(f'–ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø –∏–∑ Patents: {len(groups)}\n')
        
        created_count = 0
        updated_count = 0
        
        for group_data in groups:
            group_id = group_data.get('id')
            name = group_data.get('name')
            code = group_data.get('code', '')
            description = group_data.get('description', '')
            
            if not group_id or not name:
                continue
            
            if dry_run:
                exists = GroupCulture.objects.filter(group_culture_id=group_id).exists()
                status = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—Å—è' if exists else '‚úÖ –°–æ–∑–¥–∞—Å—Ç—Å—è'
                self.stdout.write(f'  {status}: {name} (ID: {group_id}, code: {code})')
            else:
                group, created = GroupCulture.objects.update_or_create(
                    group_culture_id=group_id,
                    defaults={
                        'name': name,
                        'code': code,
                        'description': description
                    }
                )
                
                if created:
                    created_count += 1
                    self.stdout.write(self.style.SUCCESS(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {name} (ID: {group_id})'))
                else:
                    updated_count += 1
                    self.stdout.write(f'  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {name} (ID: {group_id})')
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.stdout.write('\n' + '='*70)
        if dry_run:
            self.stdout.write(self.style.WARNING('üîç DRY-RUN –ó–ê–í–ï–†–®–ï–ù'))
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!'))
            self.stdout.write(f'\n   –°–æ–∑–¥–∞–Ω–æ: {created_count}')
            self.stdout.write(f'   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}')
            self.stdout.write(f'   –í—Å–µ–≥–æ –≤ –ë–î: {GroupCulture.objects.count()}')
        self.stdout.write('='*70 + '\n')

