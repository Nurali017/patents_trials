"""
Management command –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py load_trial_types
"""

from django.core.management.base import BaseCommand
from trials_app.models import TrialType


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–π (–ö–°–ò, –û–û–°, –î–Æ–°-–¢–ï–°–¢ –∏ –¥—Ä.)'

    def handle(self, *args, **options):
        self.stdout.write('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–π...\n')
        
        # –î–∞–Ω–Ω—ã–µ —Ç–∏–ø–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
        trial_types = [
            {
                'code': 'competitive',
                'name': '–ö–°–ò',
                'name_full': '–ö–æ–Ω–∫—É—Ä—Å–Ω–æ–µ —Å–æ—Ä—Ç–æ–∏—Å–ø—ã—Ç–∞–Ω–∏–µ (–ö–°–ò)',
                'category': 'mandatory',
                'description': '–û—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ä—Ç–∞',
                'requires_area': True,
                'requires_standard': True,
                'default_area_ha': 0.025,
                'sort_order': 1
            },
            {
                'code': 'oos',
                'name': '–û–û–°',
                'name_full': '–û–ø—ã—Ç—ã –Ω–∞ —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å (–û–û–°)',
                'category': 'mandatory',
                'description': '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏',
                'requires_area': True,
                'requires_standard': True,
                'default_area_ha': 0.028,
                'sort_order': 2
            },
            {
                'code': 'dus',
                'name': '–î–Æ–°-–¢–ï–°–¢',
                'name_full': '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –æ—Ç–ª–∏—á–∏–º–æ—Å—Ç—å, –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–î–Æ–°-–¢–ï–°–¢)',
                'category': 'mandatory',
                'description': '–û—Ü–µ–Ω–∫–∞ –æ—Ç–ª–∏—á–∏–º–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Ä—Ç–æ–≤, –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤',
                'requires_area': True,
                'requires_standard': False,
                'default_area_ha': 0.028,
                'sort_order': 3
            },
            {
                'code': 'production',
                'name': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ',
                'name_full': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ',
                'category': 'additional',
                'description': '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö',
                'requires_area': True,
                'requires_standard': True,
                'default_area_ha': 1.0,
                'sort_order': 4
            },
            {
                'code': 'variety_technology',
                'name': '–°–æ—Ä—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è',
                'name_full': '–û–ø—ã—Ç—ã –ø–æ –∏–∑—É—á–µ–Ω–∏—é —Å–æ—Ä—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                'category': 'additional',
                'description': '–ò–∑—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –≤–æ–∑–¥–µ–ª—ã–≤–∞–Ω–∏—è —Å–æ—Ä—Ç–∞',
                'requires_area': True,
                'requires_standard': False,
                'default_area_ha': 0.6,
                'sort_order': 5
            },
            {
                'code': 'efu',
                'name': '–≠–§–£',
                'name_full': '–û–ø—ã—Ç—ã –≠–§–£ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Å–µ–≤–æ–≤',
                'category': 'demonstration',
                'description': '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ä—Ç–æ–≤',
                'requires_area': True,
                'requires_standard': False,
                'default_area_ha': 0.01,
                'sort_order': 6
            },
            {
                'code': 'methodological',
                'name': '–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–ø—ã—Ç—ã',
                'name_full': '–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–ø—ã—Ç—ã, –æ–ø—ã—Ç—ã –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É, –∫–æ–ª–ª–µ–∫—Ü–∏—è',
                'category': 'special',
                'description': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–ø—ã—Ç—ã',
                'requires_area': True,
                'requires_standard': False,
                'default_area_ha': 0.15,
                'sort_order': 7
            },
            {
                'code': 'ground_control',
                'name': '–ì—Ä—É–Ω—Ç–∫–æ–Ω—Ç—Ä–æ–ª—å',
                'name_full': '–û–ø—ã—Ç—ã –ø–æ –≥—Ä—É–Ω—Ç–∫–æ–Ω—Ç—Ä–æ–ª—é',
                'category': 'special',
                'description': '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–º—è–Ω –∏ –ø–æ—á–≤—ã',
                'requires_area': False,
                'requires_standard': False,
                'sort_order': 8
            },
            {
                'code': 'ksi_applicant',
                'name': '–ö–°–ò –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è',
                'name_full': '–û–ø—ã—Ç—ã –ö–°–ò –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è',
                'category': 'additional',
                'description': '–ö–æ–Ω–∫—É—Ä—Å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è',
                'requires_area': True,
                'requires_standard': True,
                'default_area_ha': 0.025,
                'sort_order': 9
            },
            {
                'code': 'seed_reproduction',
                'name': '–†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ —Å–µ–º—è–Ω',
                'name_full': '–ü–ª–∞–Ω —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è —Å–µ–º—è–Ω –¥–ª—è —Ü–µ–ª–µ–π —Å–æ—Ä—Ç–æ–∏—Å–ø—ã—Ç–∞–Ω–∏—è',
                'category': 'reproduction',
                'description': '–†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ —Å–µ–º—è–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π',
                'requires_area': True,
                'requires_standard': False,
                'sort_order': 10
            },
            {
                'code': 'planting_material',
                'name': '–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –ø–æ—Å–∞–¥–æ—á–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
                'name_full': '–ü–ª–∞–Ω –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –ø–æ—Å–∞–¥–æ—á–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–ª–æ–¥–æ–≤–æ—è–≥–æ–¥–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä –∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞',
                'category': 'reproduction',
                'description': '–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Å–∞–∂–µ–Ω—Ü–µ–≤ –¥–ª—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π',
                'requires_area': True,
                'requires_standard': False,
                'sort_order': 11
            },
            {
                'code': 'technology_economic',
                'name': '–¢–µ—Ö–Ω–æ–ª–æ–≥–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ',
                'name_full': '–¢–µ—Ö–Ω–æ–ª–æ–≥–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –æ–ø—ã—Ç—ã',
                'category': 'special',
                'description': '–û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ä—Ç–∞',
                'requires_area': True,
                'requires_standard': False,
                'sort_order': 12
            },
            {
                'code': 'seed_reproduction_production',
                'name': '–†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
                'name_full': '–ü–ª–∞–Ω —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è —Å–µ–º—è–Ω –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
                'category': 'reproduction',
                'description': '–†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ —Å–µ–º—è–Ω –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è',
                'requires_area': True,
                'requires_standard': False,
                'sort_order': 13
            },
        ]
        
        created = 0
        updated = 0
        
        for trial_type_data in trial_types:
            trial_type, created_flag = TrialType.objects.update_or_create(
                code=trial_type_data['code'],
                defaults={
                    'name': trial_type_data['name'],
                    'name_full': trial_type_data['name_full'],
                    'category': trial_type_data['category'],
                    'description': trial_type_data['description'],
                    'requires_area': trial_type_data['requires_area'],
                    'requires_standard': trial_type_data['requires_standard'],
                    'default_area_ha': trial_type_data.get('default_area_ha'),
                    'sort_order': trial_type_data['sort_order'],
                }
            )
            
            if created_flag:
                created += 1
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω: {trial_type.name_full}')
                )
            else:
                updated += 1
                self.stdout.write(
                    self.style.SUCCESS(f'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {trial_type.name_full}')
                )
        
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'))
        self.stdout.write(f'   –¢–∏–ø–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {created}')
        self.stdout.write(f'   –¢–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}')
        self.stdout.write('='*60 + '\n')

