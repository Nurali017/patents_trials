"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–æ—Ä—Ç–æ–≤ —Å Patents Service

–û–±–Ω–æ–≤–ª—è–µ—Ç:
- patents_status (1=MAIN, 2=TESTING, 3=ARCHIVE)
- SortOriginator —Å–≤—è–∑–∏ (–æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏)
- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ—Ä—Ç–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py resync_all_sorts
    python manage.py resync_all_sorts --limit 100
    python manage.py resync_all_sorts --dry-run
"""

from django.core.management.base import BaseCommand
from trials_app.models import SortRecord, SortOriginator
from django.db.models import Q


class Command(BaseCommand):
    help = '–ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ—Ä—Ç–∞ —Å Patents Service'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limit',
            type=int,
            help='–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        )
        parser.add_argument(
            '--only-without-status',
            action='store_true',
            help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Ä—Ç–∞ –±–µ–∑ patents_status',
        )

    def handle(self, *args, **options):
        limit = options.get('limit')
        dry_run = options['dry_run']
        only_without_status = options['only_without_status']
        
        if dry_run:
            self.stdout.write(self.style.WARNING('üîç DRY-RUN —Ä–µ–∂–∏–º\n'))
        
        self.stdout.write('–ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–æ–≤ —Å Patents Service...\n')
        
        # –§–∏–ª—å—Ç—Ä
        queryset = SortRecord.objects.filter(is_deleted=False)
        
        if only_without_status:
            queryset = queryset.filter(patents_status__isnull=True)
            self.stdout.write(f'–§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ —Å–æ—Ä—Ç–∞ –±–µ–∑ patents_status\n')
        
        if limit:
            queryset = queryset[:limit]
            self.stdout.write(f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limit} —Å–æ—Ä—Ç–æ–≤\n')
        
        total = queryset.count()
        self.stdout.write(f'–°–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {total}\n')
        
        if dry_run:
            self.stdout.write(self.style.WARNING('\nüîç DRY-RUN - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'))
            return
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        success_count = 0
        error_count = 0
        originators_created = 0
        status_updated = 0
        
        for i, sort_record in enumerate(queryset, 1):
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if i % 100 == 0:
                self.stdout.write(f'   –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total}...')
            
            # –ü–æ–¥—Å—á–µ—Ç –¥–æ
            before_links = SortOriginator.objects.filter(sort_record=sort_record).count()
            had_status = sort_record.patents_status is not None
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            try:
                success = sort_record.sync_from_patents(sync_originators=True)
                
                if success:
                    success_count += 1
                    
                    # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å–ª–µ
                    after_links = SortOriginator.objects.filter(sort_record=sort_record).count()
                    new_links = after_links - before_links
                    
                    if new_links > 0:
                        originators_created += new_links
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                    sort_record.refresh_from_db()
                    if not had_status and sort_record.patents_status:
                        status_updated += 1
                    
                    # –í—ã–≤–æ–¥ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10
                    if i <= 10:
                        status_info = f"status: {sort_record.get_patents_status_display()}" if sort_record.patents_status else "no status"
                        self.stdout.write(
                            self.style.SUCCESS(
                                f'  ‚úì {sort_record.name} ({status_info}, {after_links} –æ—Ä–∏–≥–∏–Ω–∞—Ç–æ—Ä–æ–≤)'
                            )
                        )
                else:
                    error_count += 1
                    if i <= 10:
                        self.stdout.write(
                            self.style.ERROR(f'  ‚úó {sort_record.name} - –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
                        )
            
            except Exception as e:
                error_count += 1
                if i <= 10:
                    self.stdout.write(
                        self.style.ERROR(f'  ‚úó {sort_record.name} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}')
                    )
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.stdout.write('\n' + '='*70)
        self.stdout.write(self.style.SUCCESS('\n‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n'))
        self.stdout.write(f'   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}')
        self.stdout.write(f'   –£—Å–ø–µ—à–Ω–æ: {success_count}')
        self.stdout.write(f'   –û—à–∏–±–æ–∫: {error_count}')
        self.stdout.write(f'   –°–≤—è–∑–µ–π SortOriginator —Å–æ–∑–¥–∞–Ω–æ: {originators_created}')
        self.stdout.write(f'   –°—Ç–∞—Ç—É—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {status_updated}')
        self.stdout.write(f'\nüìä –ò—Ç–æ–≥–æ –≤ –ë–î:')
        self.stdout.write(f'   SortOriginator —Å–≤—è–∑–µ–π: {SortOriginator.objects.count()}')
        self.stdout.write(f'   –°–æ—Ä—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {SortRecord.objects.filter(patents_status__isnull=False).count()}')
        self.stdout.write('='*70 + '\n')

