"""
Management command –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏—Å–ø—ã—Ç–∞–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py clear_indicators
    python manage.py clear_indicators --confirm  # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
    python manage.py clear_indicators --dry-run  # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
    
–û–±–Ω–æ–≤–ª–µ–Ω–æ: 2025-01-10
"""

from django.core.management.base import BaseCommand
from trials_app.models import Indicator


class Command(BaseCommand):
    help = '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π'

    def add_arguments(self, parser):
        parser.add_argument(
            '--confirm',
            action='store_true',
            help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ (–±–µ–∑ —ç—Ç–æ–≥–æ —Ñ–ª–∞–≥–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è)',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        )

    def handle(self, *args, **options):
        self.confirm = options['confirm']
        self.dry_run = options['dry_run']
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING('üîç DRY-RUN —Ä–µ–∂–∏–º - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n'))
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        indicators = Indicator.objects.all()
        total_count = indicators.count()
        
        if total_count == 0:
            self.stdout.write(self.style.SUCCESS('‚úÖ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω—ã - –≤ –ë–î –Ω–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π'))
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        self.stdout.write(f'üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {total_count}\n')
        
        if not self.dry_run:
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
            self.stdout.write('–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:')
            for indicator in indicators[:10]:
                self.stdout.write(f'  - {indicator.name} ({indicator.code})')
            
            if total_count > 10:
                self.stdout.write(f'  ... –∏ –µ—â–µ {total_count - 10} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n')
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not self.dry_run and not self.confirm:
            self.stdout.write(
                self.style.ERROR(
                    '\n‚ùå –£–î–ê–õ–ï–ù–ò–ï –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û!\n'
                    '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --confirm:\n'
                    'python manage.py clear_indicators --confirm'
                )
            )
            return
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING('\nüîç DRY-RUN: –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã'))
            return
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
        self.stdout.write('\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏...')
        
        deleted_count = 0
        for indicator in indicators:
            indicator.delete()  # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            deleted_count += 1
        
        self.stdout.write(
            self.style.SUCCESS(
                f'\n‚úÖ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–û {deleted_count} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π!\n'
                '–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å:\n'
                'python manage.py load_indicators_v2'
            )
        )
