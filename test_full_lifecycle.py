#!/usr/bin/env python
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –°–û–†–¢–û–ò–°–ü–´–¢–ê–ù–ò–ô

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –æ—Ç –∑–∞—è–≤–∫–∏ –¥–æ —Ä–µ—à–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏:
- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –û–¥–æ–±—Ä–µ–Ω–æ –∑–∞ 1 –≥–æ–¥ (–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ 2 –≥–æ–¥–∞ (–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
- –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ 3 –≥–æ–¥–∞ (–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)

–ó–∞–ø—É—Å–∫:
    python test_full_lifecycle.py
"""

import os
import sys
import django
from datetime import date, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'trials.settings')
django.setup()

from django.contrib.auth.models import User
from trials_app.models import (
    Oblast, Region, Culture, GroupCulture, Originator, SortRecord, 
    Application, PlannedDistribution, TrialType, Trial, TrialParticipant, 
    TrialResult, TrialLaboratoryResult, Indicator
)


class TestLifecycle:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    
    def __init__(self):
        self.user = None
        self.application = None
        self.trials = {}
        self.results = {
            'passed': 0,
            'failed': 0,
            'errors': []
        }
    
    def log(self, message, level='INFO'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        icons = {
            'INFO': '‚ÑπÔ∏è',
            'SUCCESS': '‚úÖ',
            'ERROR': '‚ùå',
            'WARNING': '‚ö†Ô∏è',
            'STEP': 'üîπ'
        }
        icon = icons.get(level, '‚ÑπÔ∏è')
        print(f"{icon}  {message}")
    
    def separator(self, title):
        """–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        print("\n" + "="*70)
        print(f"  {title}")
        print("="*70)
    
    def assert_true(self, condition, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è"""
        if condition:
            self.results['passed'] += 1
            self.log(f"‚úì {message}", 'SUCCESS')
            return True
        else:
            self.results['failed'] += 1
            self.results['errors'].append(message)
            self.log(f"‚úó {message}", 'ERROR')
            return False
    
    def setup(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.separator("–ü–û–î–ì–û–¢–û–í–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.log("–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        Application.objects.filter(application_number__startswith='TEST-').delete()
        SortRecord.objects.filter(sort_id__in=[1001, 1002, 1003, 9999]).delete()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.user, created = User.objects.get_or_create(
            username='test_user',
            defaults={'email': 'test@example.com'}
        )
        self.log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user.username} {'(—Å–æ–∑–¥–∞–Ω)' if created else '(—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        oblasts_count = Oblast.objects.filter(is_deleted=False).count()
        regions_count = Region.objects.filter(is_deleted=False).count()
        cultures_count = Culture.objects.filter(is_deleted=False).count()
        indicators_count = Indicator.objects.filter(is_deleted=False).count()
        trial_types_count = TrialType.objects.filter(is_deleted=False).count()
        
        self.log(f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {oblasts_count} –æ–±–ª–∞—Å—Ç–µ–π, {regions_count} –ì–°–£, {cultures_count} –∫—É–ª—å—Ç—É—Ä")
        self.log(f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {indicators_count}, –¢–∏–ø—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–π: {trial_types_count}")
        
        if oblasts_count < 3 or regions_count < 3 or cultures_count < 1:
            self.log("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞. –°–æ–∑–¥–∞—é –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...", 'WARNING')
            self._create_minimal_data()
    
    def _create_minimal_data(self):
        """–°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        # –û–±–ª–∞—Å—Ç–∏
        oblast1, _ = Oblast.objects.get_or_create(name="–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", defaults={'code': 'ALM'})
        oblast2, _ = Oblast.objects.get_or_create(name="–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", defaults={'code': 'AKM'})
        oblast3, _ = Oblast.objects.get_or_create(name="–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", defaults={'code': 'KST'})
        
        # –ì–°–£
        Region.objects.get_or_create(name="–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π –ì–°–£", oblast=oblast1)
        Region.objects.get_or_create(name="–ê–∫–º–æ–ª–∏–Ω—Å–∫–∏–π –ì–°–£", oblast=oblast2)
        Region.objects.get_or_create(name="–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∏–π –ì–°–£", oblast=oblast3)
        
        # –ö—É–ª—å—Ç—É—Ä–∞
        group, _ = GroupCulture.objects.get_or_create(
            group_culture_id=1,
            defaults={'name': '–ó–µ—Ä–Ω–æ–≤—ã–µ', 'code': 'grain'}
        )
        Culture.objects.get_or_create(
            culture_id=1,
            defaults={'name': '–ü—à–µ–Ω–∏—Ü–∞ —è—Ä–æ–≤–∞—è', 'code': 'wheat_spring', 'group_culture': group}
        )
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        Indicator.objects.get_or_create(
            code='yield',
            defaults={'name': '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', 'unit': '—Ü/–≥–∞', 'is_quality': False}
        )
        Indicator.objects.get_or_create(
            code='protein',
            defaults={'name': '–ë–µ–ª–æ–∫', 'unit': '%', 'is_quality': True}
        )
        Indicator.objects.get_or_create(
            code='gluten',
            defaults={'name': '–ö–ª–µ–π–∫–æ–≤–∏–Ω–∞', 'unit': '%', 'is_quality': True}
        )
        
        # –¢–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è
        TrialType.objects.get_or_create(
            code='competitive',
            defaults={'name': '–ö–°–ò', 'category': 'mandatory'}
        )
        
        self.log("‚úì –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
    
    def test_scenario_1_one_year_approval(self):
        """
        –°–¶–ï–ù–ê–†–ò–ô 1: –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞ 1 –≥–æ–¥ (–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
        
        –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ - —Å–æ—Ä—Ç —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        self.separator("–°–¶–ï–ù–ê–†–ò–ô 1: –û–î–û–ë–†–ï–ù–ò–ï –ó–ê 1 –ì–û–î (–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è)")
        
        region = Region.objects.filter(oblast__name__icontains='–ö–æ—Å—Ç–∞–Ω–∞–π', is_deleted=False).first()
        if not region:
            self.log("‚ö†Ô∏è –ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∏–π –ì–°–£ –Ω–µ –Ω–∞–π–¥–µ–Ω", 'WARNING')
            return
        
        # –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
        self.log("–®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏", 'STEP')
        
        culture = Culture.objects.filter(is_deleted=False).first()
        sort_record, _ = SortRecord.objects.get_or_create(
            sort_id=1001,
            defaults={
                'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ä—Ç 1001',
                'culture': culture
            }
        )
        
        application = Application.objects.create(
            application_number=f"TEST-2025-SCENARIO1",
            submission_date=date(2025, 3, 1),
            sort_record=sort_record,
            applicant="–¢–û–û –¢–µ—Å—Ç–æ–≤–∞—è –∞–≥—Ä–æ—Ñ–∏—Ä–º–∞",
            applicant_inn_bin="123456789012",
            status='submitted',
            created_by=self.user
        )
        application.target_oblasts.add(region.oblast)
        
        self.assert_true(
            application.status == 'submitted',
            f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {application.application_number}"
        )
        
        # –®–∞–≥ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        self.log("–®–ê–ì 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ì–°–£", 'STEP')
        
        planned_dist = PlannedDistribution.objects.create(
            application=application,
            region=region,
            trial_type=TrialType.objects.first(),
            created_by=self.user
        )
        application.status = 'distributed'
        application.save()
        
        self.assert_true(
            planned_dist.status == 'planned',
            f"PlannedDistribution —Å–æ–∑–¥–∞–Ω–æ: {planned_dist}"
        )
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ Trial (2025)
        self.log("–®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ Trial 2025", 'STEP')
        
        # –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        standard_sort, _ = SortRecord.objects.get_or_create(
            sort_id=9999,
            defaults={'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç –ñ—ñ–≥–µ—Ä', 'culture': culture}
        )
        
        trial = Trial.objects.create(
            description="–ö–°–ò –ø—à–µ–Ω–∏—Ü—ã 2025 –ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è",
            region=region,
            culture=culture,
            trial_type=TrialType.objects.first(),
            area_ha=0.5,
            start_date=date(2025, 4, 15),
            year=2025,
            responsible_person="–ò–≤–∞–Ω–æ–≤ –ò.–ò.",
            created_by=self.user
        )
        
        # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        indicators = Indicator.objects.filter(is_deleted=False)
        trial.indicators.set(indicators)
        
        # –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        standard_participant = TrialParticipant.objects.create(
            trial=trial,
            sort_record=standard_sort,
            statistical_group=0,
            participant_number=1
        )
        
        tested_participant = TrialParticipant.objects.create(
            trial=trial,
            sort_record=sort_record,
            statistical_group=1,
            participant_number=2,
            application=application
        )
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤—Ä—É—á–Ω—É—é (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç serializer)
        trial.status = 'active'
        trial.save()
        
        planned_dist.refresh_from_db()
        if planned_dist.status == 'planned':
            planned_dist.status = 'in_progress'
            planned_dist.year_started = 2025
            planned_dist.save()
        
        application.status = 'in_progress'
        application.save()
        
        self.assert_true(
            trial.status == 'active',
            f"Trial —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω: Trial #{trial.id}"
        )
        self.assert_true(
            planned_dist.status == 'in_progress' and planned_dist.year_started == 2025,
            f"PlannedDistribution –≤ —Ä–∞–±–æ—Ç–µ —Å 2025 –≥–æ–¥–∞"
        )
        
        # –®–∞–≥ 4: –í–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–ª–µ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.log("–®–ê–ì 4: –í–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–ª–µ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 'STEP')
        
        yield_indicator = Indicator.objects.filter(code='yield', is_deleted=False).first()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        TrialResult.objects.create(
            participant=standard_participant,
            indicator=yield_indicator,
            plot_1=43.0,
            plot_2=43.5,
            plot_3=42.8,
            plot_4=43.2,
            measurement_date=date(2025, 9, 20),
            created_by=self.user
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ–º–æ–≥–æ (–æ—Ç–ª–∏—á–Ω—ã–µ!)
        TrialResult.objects.create(
            participant=tested_participant,
            indicator=yield_indicator,
            plot_1=51.0,
            plot_2=51.5,
            plot_3=51.2,
            plot_4=51.3,
            measurement_date=date(2025, 9, 20),
            created_by=self.user
        )
        
        trial.status = 'completed'
        trial.save()
        
        self.assert_true(
            trial.status == 'completed',
            "–ü–æ–ª–µ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
        )
        
        # –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é
        self.log("–®–ê–ì 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑—Ü–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é", 'STEP')
        
        trial.laboratory_status = 'sent'
        trial.laboratory_code = 'LAB-2025-001-KST'
        trial.laboratory_sent_date = date(2025, 10, 1)
        trial.laboratory_sample_weight = 2.0
        trial.status = 'lab_sample_sent'
        trial.save()
        
        self.assert_true(
            trial.laboratory_status == 'sent',
            f"–û–±—Ä–∞–∑–µ—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {trial.laboratory_code}"
        )
        
        # –®–∞–≥ 6: –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log("–®–ê–ì 6: –í–Ω–µ—Å–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 'STEP')
        
        protein_indicator = Indicator.objects.filter(code='protein', is_deleted=False).first()
        gluten_indicator = Indicator.objects.filter(code='gluten', is_deleted=False).first()
        
        if protein_indicator:
            TrialLaboratoryResult.objects.create(
                trial=trial,
                indicator=protein_indicator,
                participant=tested_participant,
                value=15.2,
                laboratory_code='LAB-2025-001-KST',
                analysis_date=date(2025, 10, 15),
                created_by=self.user
            )
        
        if gluten_indicator:
            TrialLaboratoryResult.objects.create(
                trial=trial,
                indicator=gluten_indicator,
                participant=tested_participant,
                value=30.0,
                laboratory_code='LAB-2025-001-KST',
                analysis_date=date(2025, 10, 15),
                created_by=self.user
            )
        
        trial.laboratory_status = 'completed'
        trial.laboratory_completed_date = date(2025, 10, 20)
        trial.status = 'lab_completed'
        trial.save()
        
        self.assert_true(
            trial.laboratory_status == 'completed',
            "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
        )
        
        # –®–∞–≥ 7: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è (approved)
        self.log("–®–ê–ì 7: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π", 'STEP')
        
        trial.decision = 'approved'
        trial.decision_justification = "–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å 51.3 —Ü/–≥–∞ (+18%), –±–µ–ª–æ–∫ 15.2%, –∫–ª–µ–π–∫–æ–≤–∏–Ω–∞ 30%"
        trial.decision_date = date(2025, 11, 1)
        trial.decided_by = self.user
        trial.status = 'approved'
        trial.save()
        
        # –û–±–Ω–æ–≤–∏—Ç—å PlannedDistribution
        planned_dist.status = 'approved'
        planned_dist.year_completed = 2025
        planned_dist.save()
        
        self.assert_true(
            trial.decision == 'approved' and trial.status == 'approved',
            "–†–µ—à–µ–Ω–∏–µ: –û–î–û–ë–†–ï–ù–û ‚úÖ"
        )
        self.assert_true(
            planned_dist.status == 'approved' and planned_dist.year_completed == 2025,
            f"PlannedDistribution –∑–∞–≤–µ—Ä—à–µ–Ω: 2025-2025 (1 –≥–æ–¥)"
        )
        
        self.log(f"\nüìä –ò–¢–û–ì –°–¶–ï–ù–ê–†–ò–Ø 1:", 'SUCCESS')
        self.log(f"   –ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: –û–î–û–ë–†–ï–ù–û –∑–∞ 1 –≥–æ–¥! ‚úÖ")
        self.log(f"   Trial #{trial.id}: {trial.decision}")
        self.log(f"   PlannedDistribution: {planned_dist.year_started}-{planned_dist.year_completed}")
        
        return trial, planned_dist
    
    def test_scenario_2_two_year_approval(self):
        """
        –°–¶–ï–ù–ê–†–ò–ô 2: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞ 2 –≥–æ–¥–∞ (–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
        """
        self.separator("–°–¶–ï–ù–ê–†–ò–ô 2: –û–î–û–ë–†–ï–ù–ò–ï –ó–ê 2 –ì–û–î–ê (–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è)")
        
        region = Region.objects.filter(oblast__name__icontains='–ê–∫–º–æ–ª', is_deleted=False).first()
        if not region:
            self.log("‚ö†Ô∏è –ê–∫–º–æ–ª–∏–Ω—Å–∫–∏–π –ì–°–£ –Ω–µ –Ω–∞–π–¥–µ–Ω", 'WARNING')
            return
        
        culture = Culture.objects.filter(is_deleted=False).first()
        sort_record, _ = SortRecord.objects.get_or_create(
            sort_id=1002,
            defaults={'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ä—Ç 1002', 'culture': culture}
        )
        
        # –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
        application = Application.objects.create(
            application_number=f"TEST-2025-SCENARIO2",
            submission_date=date(2025, 3, 1),
            sort_record=sort_record,
            applicant="–¢–û–û –¢–µ—Å—Ç–æ–≤–∞—è –∞–≥—Ä–æ—Ñ–∏—Ä–º–∞ 2",
            status='distributed',
            created_by=self.user
        )
        application.target_oblasts.add(region.oblast)
        
        planned_dist = PlannedDistribution.objects.create(
            application=application,
            region=region,
            trial_type=TrialType.objects.first(),
            created_by=self.user
        )
        
        # === –ì–û–î 2025 ===
        self.log("\nüóìÔ∏è  –ì–û–î 2025 - –ü–µ—Ä–≤—ã–π Trial", 'STEP')
        
        standard_sort = SortRecord.objects.get(sort_id=9999)
        
        trial_2025 = Trial.objects.create(
            description="–ö–°–ò –ø—à–µ–Ω–∏—Ü—ã 2025 –ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è",
            region=region,
            culture=culture,
            start_date=date(2025, 4, 15),
            year=2025,
            responsible_person="–ü–µ—Ç—Ä–æ–≤ –ü.–ü.",
            status='active',
            created_by=self.user
        )
        
        TrialParticipant.objects.create(
            trial=trial_2025,
            sort_record=standard_sort,
            statistical_group=0,
            participant_number=1
        )
        
        TrialParticipant.objects.create(
            trial=trial_2025,
            sort_record=sort_record,
            statistical_group=1,
            participant_number=2,
            application=application
        )
        
        # –û–±–Ω–æ–≤–∏—Ç—å PlannedDistribution
        planned_dist.status = 'in_progress'
        planned_dist.year_started = 2025
        planned_dist.save()
        
        application.status = 'in_progress'
        application.save()
        
        # –ü–æ–ª–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å—Ä–µ–¥–Ω–∏–µ)
        yield_indicator = Indicator.objects.filter(code='yield').first()
        
        TrialResult.objects.create(
            participant=trial_2025.participants.get(statistical_group=1),
            indicator=yield_indicator,
            plot_1=42.0,
            plot_2=42.2,
            plot_3=41.8,
            plot_4=42.1,
            measurement_date=date(2025, 9, 20),
            created_by=self.user
        )
        
        trial_2025.status = 'completed'
        trial_2025.save()
        
        # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
        trial_2025.laboratory_status = 'sent'
        trial_2025.laboratory_code = 'LAB-2025-002-AKM'
        trial_2025.status = 'lab_sample_sent'
        trial_2025.save()
        
        trial_2025.laboratory_status = 'completed'
        trial_2025.status = 'lab_completed'
        trial_2025.save()
        
        # –†–µ—à–µ–Ω–∏–µ: –ü–†–û–î–û–õ–ñ–ò–¢–¨
        trial_2025.decision = 'continue'
        trial_2025.decision_justification = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–µ–¥–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ –≥–æ–¥"
        trial_2025.decision_date = date(2025, 11, 1)
        trial_2025.status = 'continue'
        trial_2025.save()
        
        self.assert_true(
            trial_2025.decision == 'continue',
            f"Trial 2025: –†–µ—à–µ–Ω–∏–µ –ü–†–û–î–û–õ–ñ–ò–¢–¨ ‚è©"
        )
        self.assert_true(
            planned_dist.status == 'in_progress',
            "PlannedDistribution –æ—Å—Ç–∞–µ—Ç—Å—è in_progress"
        )
        
        # === –ì–û–î 2026 ===
        self.log("\nüóìÔ∏è  –ì–û–î 2026 - –í—Ç–æ—Ä–æ–π Trial", 'STEP')
        
        trial_2026 = Trial.objects.create(
            description="–ö–°–ò –ø—à–µ–Ω–∏—Ü—ã 2026 –ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è",
            region=region,
            culture=culture,
            start_date=date(2026, 4, 15),
            year=2026,
            responsible_person="–ü–µ—Ç—Ä–æ–≤ –ü.–ü.",
            status='active',
            created_by=self.user
        )
        
        TrialParticipant.objects.create(
            trial=trial_2026,
            sort_record=standard_sort,
            statistical_group=0,
            participant_number=1
        )
        
        TrialParticipant.objects.create(
            trial=trial_2026,
            sort_record=sort_record,
            statistical_group=1,
            participant_number=2,
            application=application
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª—É—á—à–µ
        TrialResult.objects.create(
            participant=trial_2026.participants.get(statistical_group=1),
            indicator=yield_indicator,
            plot_1=46.5,
            plot_2=46.8,
            plot_3=46.3,
            plot_4=46.7,
            measurement_date=date(2026, 9, 20),
            created_by=self.user
        )
        
        trial_2026.status = 'completed'
        trial_2026.save()
        
        # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
        trial_2026.laboratory_status = 'completed'
        trial_2026.status = 'lab_completed'
        trial_2026.save()
        
        # –†–µ—à–µ–Ω–∏–µ: –û–î–û–ë–†–ï–ù–û
        trial_2026.decision = 'approved'
        trial_2026.decision_justification = "–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ 2 –≥–æ–¥–∞"
        trial_2026.decision_date = date(2026, 11, 1)
        trial_2026.status = 'approved'
        trial_2026.save()
        
        # –ó–∞–≤–µ—Ä—à–∏—Ç—å PlannedDistribution
        planned_dist.status = 'approved'
        planned_dist.year_completed = 2026
        planned_dist.save()
        
        self.assert_true(
            trial_2026.decision == 'approved',
            f"Trial 2026: –†–µ—à–µ–Ω–∏–µ –û–î–û–ë–†–ï–ù–û ‚úÖ"
        )
        self.assert_true(
            planned_dist.status == 'approved' and planned_dist.year_completed == 2026,
            f"PlannedDistribution –∑–∞–≤–µ—Ä—à–µ–Ω: 2025-2026 (2 –≥–æ–¥–∞)"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ get_trials()
        all_trials = planned_dist.get_trials()
        self.assert_true(
            all_trials.count() == 2,
            f"PlannedDistribution.get_trials() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2 Trial"
        )
        
        self.log(f"\nüìä –ò–¢–û–ì –°–¶–ï–ù–ê–†–ò–Ø 2:", 'SUCCESS')
        self.log(f"   –ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: –û–î–û–ë–†–ï–ù–û –∑–∞ 2 –≥–æ–¥–∞ ‚úÖ")
        self.log(f"   Trial #({trial_2025.id}, {trial_2026.id})")
        self.log(f"   –†–µ—à–µ–Ω–∏—è: continue ‚Üí approved")
    
    def test_scenario_3_three_year_approval(self):
        """
        –°–¶–ï–ù–ê–†–ò–ô 3: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ 3 –≥–æ–¥–∞ (–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
        """
        self.separator("–°–¶–ï–ù–ê–†–ò–ô 3: –û–î–û–ë–†–ï–ù–ò–ï –ó–ê 3 –ì–û–î–ê (–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è)")
        
        region = Region.objects.filter(oblast__name__icontains='–ê–ª–º–∞—Ç', is_deleted=False).first()
        if not region:
            self.log("‚ö†Ô∏è –ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π –ì–°–£ –Ω–µ –Ω–∞–π–¥–µ–Ω", 'WARNING')
            return
        
        culture = Culture.objects.filter(is_deleted=False).first()
        sort_record, _ = SortRecord.objects.get_or_create(
            sort_id=1003,
            defaults={'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ä—Ç 1003', 'culture': culture}
        )
        standard_sort = SortRecord.objects.get(sort_id=9999)
        yield_indicator = Indicator.objects.filter(code='yield').first()
        
        # –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
        application = Application.objects.create(
            application_number=f"TEST-2025-SCENARIO3",
            submission_date=date(2025, 3, 1),
            sort_record=sort_record,
            applicant="–¢–û–û –¢–µ—Å—Ç–æ–≤–∞—è –∞–≥—Ä–æ—Ñ–∏—Ä–º–∞ 3",
            status='distributed',
            created_by=self.user
        )
        application.target_oblasts.add(region.oblast)
        
        planned_dist = PlannedDistribution.objects.create(
            application=application,
            region=region,
            trial_type=TrialType.objects.first(),
            created_by=self.user
        )
        
        # === –ì–û–î 2025 ===
        self.log("\nüóìÔ∏è  –ì–û–î 2025", 'STEP')
        trial_2025 = self._create_trial_year(region, culture, sort_record, standard_sort, application, 2025, 45.0, 'continue')
        planned_dist.status = 'in_progress'
        planned_dist.year_started = 2025
        planned_dist.save()
        
        # === –ì–û–î 2026 ===
        self.log("\nüóìÔ∏è  –ì–û–î 2026", 'STEP')
        trial_2026 = self._create_trial_year(region, culture, sort_record, standard_sort, application, 2026, 46.5, 'continue')
        
        # === –ì–û–î 2027 ===
        self.log("\nüóìÔ∏è  –ì–û–î 2027", 'STEP')
        trial_2027 = self._create_trial_year(region, culture, sort_record, standard_sort, application, 2027, 47.8, 'approved')
        
        # –ó–∞–≤–µ—Ä—à–∏—Ç—å PlannedDistribution
        planned_dist.status = 'approved'
        planned_dist.year_completed = 2027
        planned_dist.save()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        all_trials = planned_dist.get_trials()
        years_count = planned_dist.get_years_count()
        
        self.assert_true(
            all_trials.count() == 3,
            f"PlannedDistribution.get_trials() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 3 Trial"
        )
        self.assert_true(
            years_count == 3,
            f"PlannedDistribution.get_years_count() = 3"
        )
        self.assert_true(
            planned_dist.status == 'approved' and planned_dist.year_completed == 2027,
            f"PlannedDistribution –∑–∞–≤–µ—Ä—à–µ–Ω: 2025-2027 (3 –≥–æ–¥–∞)"
        )
        
        self.log(f"\nüìä –ò–¢–û–ì –°–¶–ï–ù–ê–†–ò–Ø 3:", 'SUCCESS')
        self.log(f"   –ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: –û–î–û–ë–†–ï–ù–û –∑–∞ 3 –≥–æ–¥–∞ ‚úÖ")
        self.log(f"   Trials: #{trial_2025.id}, #{trial_2026.id}, #{trial_2027.id}")
        self.log(f"   –†–µ—à–µ–Ω–∏—è: continue ‚Üí continue ‚Üí approved")
        self.log(f"   –î–∏–Ω–∞–º–∏–∫–∞ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏: 45.0 ‚Üí 46.5 ‚Üí 47.8 —Ü/–≥–∞")
    
    def _create_trial_year(self, region, culture, sort_record, standard_sort, application, year, yield_value, decision):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Trial –∑–∞ –≥–æ–¥"""
        trial = Trial.objects.create(
            description=f"–ö–°–ò –ø—à–µ–Ω–∏—Ü—ã {year} {region.name}",
            region=region,
            culture=culture,
            start_date=date(year, 4, 15),
            year=year,
            responsible_person="–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ä—Ç–æ–ø—ã—Ç",
            status='active',
            created_by=self.user
        )
        
        # –£—á–∞—Å—Ç–Ω–∏–∫–∏
        TrialParticipant.objects.create(
            trial=trial,
            sort_record=standard_sort,
            statistical_group=0,
            participant_number=1
        )
        
        tested = TrialParticipant.objects.create(
            trial=trial,
            sort_record=sort_record,
            statistical_group=1,
            participant_number=2,
            application=application
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        yield_indicator = Indicator.objects.filter(code='yield').first()
        TrialResult.objects.create(
            participant=tested,
            indicator=yield_indicator,
            plot_1=yield_value,
            plot_2=yield_value + 0.2,
            plot_3=yield_value - 0.2,
            plot_4=yield_value + 0.1,
            measurement_date=date(year, 9, 20),
            created_by=self.user
        )
        
        # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
        trial.status = 'completed'
        trial.save()
        
        trial.laboratory_status = 'completed'
        trial.status = 'lab_completed'
        trial.save()
        
        trial.decision = decision
        trial.decision_date = date(year, 11, 1)
        trial.status = decision
        trial.save()
        
        self.log(f"   Trial {year}: —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å {yield_value} —Ü/–≥–∞ ‚Üí {decision}")
        
        return trial
    
    def test_api_regional_status(self):
        """–¢–µ—Å—Ç API endpoint: /applications/{id}/regional-status/"""
        self.separator("–¢–ï–°–¢ API: /applications/{id}/regional-status/")
        
        # –í–∑—è—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
        application = Application.objects.filter(
            planned_distributions_records__isnull=False,
            is_deleted=False
        ).first()
        
        if not application:
            self.log("‚ö†Ô∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞", 'WARNING')
            return
        
        from rest_framework.test import APIRequestFactory, force_authenticate
        from trials_app.views import ApplicationViewSet
        
        factory = APIRequestFactory()
        request = factory.get(f'/api/v1/applications/{application.id}/regional-status/')
        force_authenticate(request, user=self.user)
        
        view = ApplicationViewSet.as_view({'get': 'regional_status'})
        response = view(request, pk=application.id)
        
        self.assert_true(
            response.status_code == 200,
            f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å 200"
        )
        
        if response.status_code == 200:
            data = response.data
            self.log(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç API:")
            self.log(f"   –ó–∞—è–≤–∫–∞: {data.get('application_number')}")
            self.log(f"   –°—Ç–∞—Ç—É—Å: {data.get('application_status')}")
            self.log(f"   –û–±–ª–∞—Å—Ç–µ–π: {data.get('total_regions')}")
            
            for region in data.get('regions', []):
                self.log(f"\n   üåç {region['region_name']} ({region['oblast_name']})")
                self.log(f"      –°—Ç–∞—Ç—É—Å: {region['status_display']}")
                self.log(f"      –ì–æ–¥—ã: {region['year_started']}-{region['year_completed'] or '–≤ —Ä–∞–±–æ—Ç–µ'}")
                self.log(f"      –ò—Å–ø—ã—Ç–∞–Ω–∏–π: {len(region['trials'])}")
                
                for trial in region['trials']:
                    self.log(f"         ‚Ä¢ {trial['year']}: {trial['decision_display'] or trial['status_display']}")
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏"""
        self.separator("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.results['passed']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.results['failed']}")
        
        if self.results['failed'] > 0:
            print(f"\n‚ùå –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:")
            for error in self.results['errors']:
                print(f"   ‚Ä¢ {error}")
        
        print(f"\n{'='*70}")
        
        if self.results['failed'] == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        else:
            print(f"‚ö†Ô∏è  –ï–°–¢–¨ –û–®–ò–ë–ö–ò: {self.results['failed']}")
        
        print(f"{'='*70}\n")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "üß™ –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê".center(70, "="))
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –æ—Ç –∑–∞—è–≤–∫–∏ –¥–æ —Ä–µ—à–µ–Ω–∏—è —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º–∏")
    print("="*70)
    
    tester = TestLifecycle()
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        tester.setup()
        
        # –°—Ü–µ–Ω–∞—Ä–∏–∏
        tester.test_scenario_1_one_year_approval()
        tester.test_scenario_2_two_year_approval()
        tester.test_scenario_3_three_year_approval()
        
        # API —Ç–µ—Å—Ç—ã
        tester.test_api_regional_status()
        
        # –ò—Ç–æ–≥–∏
        tester.print_summary()
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()

